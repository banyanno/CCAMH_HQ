'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.8943
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DS_CCAMH_ASSESSMENTS"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DS_CCAMH_ASSESSMENTS
    Inherits Global.System.Data.DataSet
    
    Private tableCCAMH_ASSESSMENTS As CCAMH_ASSESSMENTSDataTable
    
    Private tableCCAMH_VIEW_CHIEFCOMPLAINTS As CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
    
    Private tableCCAMH_CLIENT_ASSESSMENT_INFO As CCAMH_CLIENT_ASSESSMENT_INFODataTable
    
    Private tableCCAMH_ASSESSMENT_DETAIL As CCAMH_ASSESSMENT_DETAILDataTable
    
    Private tableCLIENT_CA_SOCIAL As CLIENT_CA_SOCIALDataTable
    
    Private tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CCAMH_ASSESSMENTS")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_ASSESSMENTSDataTable(ds.Tables("CCAMH_ASSESSMENTS")))
            End If
            If (Not (ds.Tables("CCAMH_VIEW_CHIEFCOMPLAINTS")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_VIEW_CHIEFCOMPLAINTSDataTable(ds.Tables("CCAMH_VIEW_CHIEFCOMPLAINTS")))
            End If
            If (Not (ds.Tables("CCAMH_CLIENT_ASSESSMENT_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_CLIENT_ASSESSMENT_INFODataTable(ds.Tables("CCAMH_CLIENT_ASSESSMENT_INFO")))
            End If
            If (Not (ds.Tables("CCAMH_ASSESSMENT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_ASSESSMENT_DETAILDataTable(ds.Tables("CCAMH_ASSESSMENT_DETAIL")))
            End If
            If (Not (ds.Tables("CLIENT_CA_SOCIAL")) Is Nothing) Then
                MyBase.Tables.Add(New CLIENT_CA_SOCIALDataTable(ds.Tables("CLIENT_CA_SOCIAL")))
            End If
            If (Not (ds.Tables("CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable(ds.Tables("CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CCAMH_ASSESSMENTS() As CCAMH_ASSESSMENTSDataTable
        Get
            Return Me.tableCCAMH_ASSESSMENTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CCAMH_VIEW_CHIEFCOMPLAINTS() As CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
        Get
            Return Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CCAMH_CLIENT_ASSESSMENT_INFO() As CCAMH_CLIENT_ASSESSMENT_INFODataTable
        Get
            Return Me.tableCCAMH_CLIENT_ASSESSMENT_INFO
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CCAMH_ASSESSMENT_DETAIL() As CCAMH_ASSESSMENT_DETAILDataTable
        Get
            Return Me.tableCCAMH_ASSESSMENT_DETAIL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CLIENT_CA_SOCIAL() As CLIENT_CA_SOCIALDataTable
        Get
            Return Me.tableCLIENT_CA_SOCIAL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS() As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
        Get
            Return Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DS_CCAMH_ASSESSMENTS = CType(MyBase.Clone,DS_CCAMH_ASSESSMENTS)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CCAMH_ASSESSMENTS")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_ASSESSMENTSDataTable(ds.Tables("CCAMH_ASSESSMENTS")))
            End If
            If (Not (ds.Tables("CCAMH_VIEW_CHIEFCOMPLAINTS")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_VIEW_CHIEFCOMPLAINTSDataTable(ds.Tables("CCAMH_VIEW_CHIEFCOMPLAINTS")))
            End If
            If (Not (ds.Tables("CCAMH_CLIENT_ASSESSMENT_INFO")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_CLIENT_ASSESSMENT_INFODataTable(ds.Tables("CCAMH_CLIENT_ASSESSMENT_INFO")))
            End If
            If (Not (ds.Tables("CCAMH_ASSESSMENT_DETAIL")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_ASSESSMENT_DETAILDataTable(ds.Tables("CCAMH_ASSESSMENT_DETAIL")))
            End If
            If (Not (ds.Tables("CLIENT_CA_SOCIAL")) Is Nothing) Then
                MyBase.Tables.Add(New CLIENT_CA_SOCIALDataTable(ds.Tables("CLIENT_CA_SOCIAL")))
            End If
            If (Not (ds.Tables("CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS")) Is Nothing) Then
                MyBase.Tables.Add(New CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable(ds.Tables("CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCCAMH_ASSESSMENTS = CType(MyBase.Tables("CCAMH_ASSESSMENTS"),CCAMH_ASSESSMENTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCCAMH_ASSESSMENTS) Is Nothing) Then
                Me.tableCCAMH_ASSESSMENTS.InitVars
            End If
        End If
        Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS = CType(MyBase.Tables("CCAMH_VIEW_CHIEFCOMPLAINTS"),CCAMH_VIEW_CHIEFCOMPLAINTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS) Is Nothing) Then
                Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.InitVars
            End If
        End If
        Me.tableCCAMH_CLIENT_ASSESSMENT_INFO = CType(MyBase.Tables("CCAMH_CLIENT_ASSESSMENT_INFO"),CCAMH_CLIENT_ASSESSMENT_INFODataTable)
        If (initTable = true) Then
            If (Not (Me.tableCCAMH_CLIENT_ASSESSMENT_INFO) Is Nothing) Then
                Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.InitVars
            End If
        End If
        Me.tableCCAMH_ASSESSMENT_DETAIL = CType(MyBase.Tables("CCAMH_ASSESSMENT_DETAIL"),CCAMH_ASSESSMENT_DETAILDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCCAMH_ASSESSMENT_DETAIL) Is Nothing) Then
                Me.tableCCAMH_ASSESSMENT_DETAIL.InitVars
            End If
        End If
        Me.tableCLIENT_CA_SOCIAL = CType(MyBase.Tables("CLIENT_CA_SOCIAL"),CLIENT_CA_SOCIALDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCLIENT_CA_SOCIAL) Is Nothing) Then
                Me.tableCLIENT_CA_SOCIAL.InitVars
            End If
        End If
        Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS = CType(MyBase.Tables("CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS"),CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS) Is Nothing) Then
                Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DS_CCAMH_ASSESSMENTS"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DS_CCAMH_ASSESSMENTS.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCCAMH_ASSESSMENTS = New CCAMH_ASSESSMENTSDataTable
        MyBase.Tables.Add(Me.tableCCAMH_ASSESSMENTS)
        Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS = New CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
        MyBase.Tables.Add(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS)
        Me.tableCCAMH_CLIENT_ASSESSMENT_INFO = New CCAMH_CLIENT_ASSESSMENT_INFODataTable
        MyBase.Tables.Add(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO)
        Me.tableCCAMH_ASSESSMENT_DETAIL = New CCAMH_ASSESSMENT_DETAILDataTable
        MyBase.Tables.Add(Me.tableCCAMH_ASSESSMENT_DETAIL)
        Me.tableCLIENT_CA_SOCIAL = New CLIENT_CA_SOCIALDataTable
        MyBase.Tables.Add(Me.tableCLIENT_CA_SOCIAL)
        Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS = New CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
        MyBase.Tables.Add(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCCAMH_ASSESSMENTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCCAMH_VIEW_CHIEFCOMPLAINTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCCAMH_CLIENT_ASSESSMENT_INFO() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCCAMH_ASSESSMENT_DETAIL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCLIENT_CA_SOCIAL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DS_CCAMH_ASSESSMENTS = New DS_CCAMH_ASSESSMENTS
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CCAMH_ASSESSMENTSRowChangeEventHandler(ByVal sender As Object, ByVal e As CCAMH_ASSESSMENTSRowChangeEvent)
    
    Public Delegate Sub CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEventHandler(ByVal sender As Object, ByVal e As CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEvent)
    
    Public Delegate Sub CCAMH_CLIENT_ASSESSMENT_INFORowChangeEventHandler(ByVal sender As Object, ByVal e As CCAMH_CLIENT_ASSESSMENT_INFORowChangeEvent)
    
    Public Delegate Sub CCAMH_ASSESSMENT_DETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As CCAMH_ASSESSMENT_DETAILRowChangeEvent)
    
    Public Delegate Sub CLIENT_CA_SOCIALRowChangeEventHandler(ByVal sender As Object, ByVal e As CLIENT_CA_SOCIALRowChangeEvent)
    
    Public Delegate Sub CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEventHandler(ByVal sender As Object, ByVal e As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CCAMH_ASSESSMENTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of CCAMH_ASSESSMENTSRow)
        
        Private columnASSESS_ID As Global.System.Data.DataColumn
        
        Private columnASSESS_NAME As Global.System.Data.DataColumn
        
        Private columnASSESS_DESCRIPTION As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CCAMH_ASSESSMENTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASSESS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASSESS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASSESS_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASSESS_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASSESS_DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASSESS_DESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CCAMH_ASSESSMENTSRow
            Get
                Return CType(Me.Rows(index),CCAMH_ASSESSMENTSRow)
            End Get
        End Property
        
        Public Event CCAMH_ASSESSMENTSRowChanging As CCAMH_ASSESSMENTSRowChangeEventHandler
        
        Public Event CCAMH_ASSESSMENTSRowChanged As CCAMH_ASSESSMENTSRowChangeEventHandler
        
        Public Event CCAMH_ASSESSMENTSRowDeleting As CCAMH_ASSESSMENTSRowChangeEventHandler
        
        Public Event CCAMH_ASSESSMENTSRowDeleted As CCAMH_ASSESSMENTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCCAMH_ASSESSMENTSRow(ByVal row As CCAMH_ASSESSMENTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCCAMH_ASSESSMENTSRow(ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String) As CCAMH_ASSESSMENTSRow
            Dim rowCCAMH_ASSESSMENTSRow As CCAMH_ASSESSMENTSRow = CType(Me.NewRow,CCAMH_ASSESSMENTSRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, ASSESS_NAME, ASSESS_DESCRIPTION}
            rowCCAMH_ASSESSMENTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCCAMH_ASSESSMENTSRow)
            Return rowCCAMH_ASSESSMENTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByASSESS_ID(ByVal ASSESS_ID As Decimal) As CCAMH_ASSESSMENTSRow
            Return CType(Me.Rows.Find(New Object() {ASSESS_ID}),CCAMH_ASSESSMENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CCAMH_ASSESSMENTSDataTable = CType(MyBase.Clone,CCAMH_ASSESSMENTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CCAMH_ASSESSMENTSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnASSESS_ID = MyBase.Columns("ASSESS_ID")
            Me.columnASSESS_NAME = MyBase.Columns("ASSESS_NAME")
            Me.columnASSESS_DESCRIPTION = MyBase.Columns("ASSESS_DESCRIPTION")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnASSESS_ID = New Global.System.Data.DataColumn("ASSESS_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASSESS_ID)
            Me.columnASSESS_NAME = New Global.System.Data.DataColumn("ASSESS_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASSESS_NAME)
            Me.columnASSESS_DESCRIPTION = New Global.System.Data.DataColumn("ASSESS_DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASSESS_DESCRIPTION)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnASSESS_ID}, true))
            Me.columnASSESS_ID.AutoIncrement = true
            Me.columnASSESS_ID.AutoIncrementSeed = -1
            Me.columnASSESS_ID.AutoIncrementStep = -1
            Me.columnASSESS_ID.AllowDBNull = false
            Me.columnASSESS_ID.ReadOnly = true
            Me.columnASSESS_ID.Unique = true
            Me.columnASSESS_NAME.MaxLength = 100
            Me.columnASSESS_DESCRIPTION.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCCAMH_ASSESSMENTSRow() As CCAMH_ASSESSMENTSRow
            Return CType(Me.NewRow,CCAMH_ASSESSMENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CCAMH_ASSESSMENTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CCAMH_ASSESSMENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CCAMH_ASSESSMENTSRowChangedEvent) Is Nothing) Then
                RaiseEvent CCAMH_ASSESSMENTSRowChanged(Me, New CCAMH_ASSESSMENTSRowChangeEvent(CType(e.Row,CCAMH_ASSESSMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CCAMH_ASSESSMENTSRowChangingEvent) Is Nothing) Then
                RaiseEvent CCAMH_ASSESSMENTSRowChanging(Me, New CCAMH_ASSESSMENTSRowChangeEvent(CType(e.Row,CCAMH_ASSESSMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CCAMH_ASSESSMENTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CCAMH_ASSESSMENTSRowDeleted(Me, New CCAMH_ASSESSMENTSRowChangeEvent(CType(e.Row,CCAMH_ASSESSMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CCAMH_ASSESSMENTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CCAMH_ASSESSMENTSRowDeleting(Me, New CCAMH_ASSESSMENTSRowChangeEvent(CType(e.Row,CCAMH_ASSESSMENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCCAMH_ASSESSMENTSRow(ByVal row As CCAMH_ASSESSMENTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_CCAMH_ASSESSMENTS = New DS_CCAMH_ASSESSMENTS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CCAMH_ASSESSMENTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of CCAMH_VIEW_CHIEFCOMPLAINTSRow)
        
        Private columnCLIENT_NO As Global.System.Data.DataColumn
        
        Private columnSYMPTOM_NAME As Global.System.Data.DataColumn
        
        Private columnDESCRIPTION As Global.System.Data.DataColumn
        
        Private columnSYMP_TYPE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CCAMH_VIEW_CHIEFCOMPLAINTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYMPTOM_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYMPTOM_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYMP_TYPEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSYMP_TYPE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CCAMH_VIEW_CHIEFCOMPLAINTSRow
            Get
                Return CType(Me.Rows(index),CCAMH_VIEW_CHIEFCOMPLAINTSRow)
            End Get
        End Property
        
        Public Event CCAMH_VIEW_CHIEFCOMPLAINTSRowChanging As CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEventHandler
        
        Public Event CCAMH_VIEW_CHIEFCOMPLAINTSRowChanged As CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEventHandler
        
        Public Event CCAMH_VIEW_CHIEFCOMPLAINTSRowDeleting As CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEventHandler
        
        Public Event CCAMH_VIEW_CHIEFCOMPLAINTSRowDeleted As CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCCAMH_VIEW_CHIEFCOMPLAINTSRow(ByVal row As CCAMH_VIEW_CHIEFCOMPLAINTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCCAMH_VIEW_CHIEFCOMPLAINTSRow(ByVal CLIENT_NO As Decimal, ByVal SYMPTOM_NAME As String, ByVal DESCRIPTION As String, ByVal SYMP_TYPE As String) As CCAMH_VIEW_CHIEFCOMPLAINTSRow
            Dim rowCCAMH_VIEW_CHIEFCOMPLAINTSRow As CCAMH_VIEW_CHIEFCOMPLAINTSRow = CType(Me.NewRow,CCAMH_VIEW_CHIEFCOMPLAINTSRow)
            Dim columnValuesArray() As Object = New Object() {CLIENT_NO, SYMPTOM_NAME, DESCRIPTION, SYMP_TYPE}
            rowCCAMH_VIEW_CHIEFCOMPLAINTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCCAMH_VIEW_CHIEFCOMPLAINTSRow)
            Return rowCCAMH_VIEW_CHIEFCOMPLAINTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CCAMH_VIEW_CHIEFCOMPLAINTSDataTable = CType(MyBase.Clone,CCAMH_VIEW_CHIEFCOMPLAINTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCLIENT_NO = MyBase.Columns("CLIENT_NO")
            Me.columnSYMPTOM_NAME = MyBase.Columns("SYMPTOM_NAME")
            Me.columnDESCRIPTION = MyBase.Columns("DESCRIPTION")
            Me.columnSYMP_TYPE = MyBase.Columns("SYMP_TYPE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCLIENT_NO = New Global.System.Data.DataColumn("CLIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_NO)
            Me.columnSYMPTOM_NAME = New Global.System.Data.DataColumn("SYMPTOM_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYMPTOM_NAME)
            Me.columnDESCRIPTION = New Global.System.Data.DataColumn("DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDESCRIPTION)
            Me.columnSYMP_TYPE = New Global.System.Data.DataColumn("SYMP_TYPE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYMP_TYPE)
            Me.columnSYMPTOM_NAME.MaxLength = 50
            Me.columnDESCRIPTION.MaxLength = 200
            Me.columnSYMP_TYPE.AllowDBNull = false
            Me.columnSYMP_TYPE.MaxLength = 8
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCCAMH_VIEW_CHIEFCOMPLAINTSRow() As CCAMH_VIEW_CHIEFCOMPLAINTSRow
            Return CType(Me.NewRow,CCAMH_VIEW_CHIEFCOMPLAINTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CCAMH_VIEW_CHIEFCOMPLAINTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CCAMH_VIEW_CHIEFCOMPLAINTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CCAMH_VIEW_CHIEFCOMPLAINTSRowChangedEvent) Is Nothing) Then
                RaiseEvent CCAMH_VIEW_CHIEFCOMPLAINTSRowChanged(Me, New CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEvent(CType(e.Row,CCAMH_VIEW_CHIEFCOMPLAINTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CCAMH_VIEW_CHIEFCOMPLAINTSRowChangingEvent) Is Nothing) Then
                RaiseEvent CCAMH_VIEW_CHIEFCOMPLAINTSRowChanging(Me, New CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEvent(CType(e.Row,CCAMH_VIEW_CHIEFCOMPLAINTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CCAMH_VIEW_CHIEFCOMPLAINTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CCAMH_VIEW_CHIEFCOMPLAINTSRowDeleted(Me, New CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEvent(CType(e.Row,CCAMH_VIEW_CHIEFCOMPLAINTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CCAMH_VIEW_CHIEFCOMPLAINTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CCAMH_VIEW_CHIEFCOMPLAINTSRowDeleting(Me, New CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEvent(CType(e.Row,CCAMH_VIEW_CHIEFCOMPLAINTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCCAMH_VIEW_CHIEFCOMPLAINTSRow(ByVal row As CCAMH_VIEW_CHIEFCOMPLAINTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_CCAMH_ASSESSMENTS = New DS_CCAMH_ASSESSMENTS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CCAMH_VIEW_CHIEFCOMPLAINTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CCAMH_CLIENT_ASSESSMENT_INFODataTable
        Inherits Global.System.Data.TypedTableBase(Of CCAMH_CLIENT_ASSESSMENT_INFORow)
        
        Private columnCLIENT_ASSESS_ID As Global.System.Data.DataColumn
        
        Private columnCLIENT_NO As Global.System.Data.DataColumn
        
        Private columnCLIENT_PRO_DIAGNOSIS As Global.System.Data.DataColumn
        
        Private columnCLIENT_MNG_PLAN As Global.System.Data.DataColumn
        
        Private columnCLIENT_FINAL_DIAGNOSIS As Global.System.Data.DataColumn
        
        Private columnCLIENT_ASSESS_DATE As Global.System.Data.DataColumn
        
        Private columnCLIENT_DATE_REG As Global.System.Data.DataColumn
        
        Private columnCLIENT_MEDICATION As Global.System.Data.DataColumn
        
        Private columnCLIENT_OTHER_THERAPIES As Global.System.Data.DataColumn
        
        Private columnCLIENT_RESPONSE As Global.System.Data.DataColumn
        
        Private columnCLIENT_RAPPORT_ENGAGEMENT As Global.System.Data.DataColumn
        
        Private columnCLIENT_LIASION As Global.System.Data.DataColumn
        
        Private columnCLIENT_ACTION_PLAN As Global.System.Data.DataColumn
        
        Private columnTHERAPIST_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CCAMH_CLIENT_ASSESSMENT_INFO"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_ASSESS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_ASSESS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_PRO_DIAGNOSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_PRO_DIAGNOSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_MNG_PLANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_MNG_PLAN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_FINAL_DIAGNOSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_FINAL_DIAGNOSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_ASSESS_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_ASSESS_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_DATE_REGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_DATE_REG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_MEDICATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_MEDICATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_OTHER_THERAPIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_OTHER_THERAPIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_RESPONSEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_RESPONSE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_RAPPORT_ENGAGEMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_RAPPORT_ENGAGEMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_LIASIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_LIASION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_ACTION_PLANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_ACTION_PLAN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THERAPIST_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHERAPIST_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CCAMH_CLIENT_ASSESSMENT_INFORow
            Get
                Return CType(Me.Rows(index),CCAMH_CLIENT_ASSESSMENT_INFORow)
            End Get
        End Property
        
        Public Event CCAMH_CLIENT_ASSESSMENT_INFORowChanging As CCAMH_CLIENT_ASSESSMENT_INFORowChangeEventHandler
        
        Public Event CCAMH_CLIENT_ASSESSMENT_INFORowChanged As CCAMH_CLIENT_ASSESSMENT_INFORowChangeEventHandler
        
        Public Event CCAMH_CLIENT_ASSESSMENT_INFORowDeleting As CCAMH_CLIENT_ASSESSMENT_INFORowChangeEventHandler
        
        Public Event CCAMH_CLIENT_ASSESSMENT_INFORowDeleted As CCAMH_CLIENT_ASSESSMENT_INFORowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCCAMH_CLIENT_ASSESSMENT_INFORow(ByVal row As CCAMH_CLIENT_ASSESSMENT_INFORow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCCAMH_CLIENT_ASSESSMENT_INFORow(ByVal CLIENT_NO As Decimal, ByVal CLIENT_PRO_DIAGNOSIS As String, ByVal CLIENT_MNG_PLAN As String, ByVal CLIENT_FINAL_DIAGNOSIS As String, ByVal CLIENT_ASSESS_DATE As Date, ByVal CLIENT_DATE_REG As Date, ByVal CLIENT_MEDICATION As String, ByVal CLIENT_OTHER_THERAPIES As String, ByVal CLIENT_RESPONSE As String, ByVal CLIENT_RAPPORT_ENGAGEMENT As String, ByVal CLIENT_LIASION As String, ByVal CLIENT_ACTION_PLAN As String, ByVal THERAPIST_ID As Decimal) As CCAMH_CLIENT_ASSESSMENT_INFORow
            Dim rowCCAMH_CLIENT_ASSESSMENT_INFORow As CCAMH_CLIENT_ASSESSMENT_INFORow = CType(Me.NewRow,CCAMH_CLIENT_ASSESSMENT_INFORow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CLIENT_NO, CLIENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN, CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSESS_DATE, CLIENT_DATE_REG, CLIENT_MEDICATION, CLIENT_OTHER_THERAPIES, CLIENT_RESPONSE, CLIENT_RAPPORT_ENGAGEMENT, CLIENT_LIASION, CLIENT_ACTION_PLAN, THERAPIST_ID}
            rowCCAMH_CLIENT_ASSESSMENT_INFORow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCCAMH_CLIENT_ASSESSMENT_INFORow)
            Return rowCCAMH_CLIENT_ASSESSMENT_INFORow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCLIENT_ASSESS_ID(ByVal CLIENT_ASSESS_ID As Decimal) As CCAMH_CLIENT_ASSESSMENT_INFORow
            Return CType(Me.Rows.Find(New Object() {CLIENT_ASSESS_ID}),CCAMH_CLIENT_ASSESSMENT_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CCAMH_CLIENT_ASSESSMENT_INFODataTable = CType(MyBase.Clone,CCAMH_CLIENT_ASSESSMENT_INFODataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CCAMH_CLIENT_ASSESSMENT_INFODataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCLIENT_ASSESS_ID = MyBase.Columns("CLIENT_ASSESS_ID")
            Me.columnCLIENT_NO = MyBase.Columns("CLIENT_NO")
            Me.columnCLIENT_PRO_DIAGNOSIS = MyBase.Columns("CLIENT_PRO_DIAGNOSIS")
            Me.columnCLIENT_MNG_PLAN = MyBase.Columns("CLIENT_MNG_PLAN")
            Me.columnCLIENT_FINAL_DIAGNOSIS = MyBase.Columns("CLIENT_FINAL_DIAGNOSIS")
            Me.columnCLIENT_ASSESS_DATE = MyBase.Columns("CLIENT_ASSESS_DATE")
            Me.columnCLIENT_DATE_REG = MyBase.Columns("CLIENT_DATE_REG")
            Me.columnCLIENT_MEDICATION = MyBase.Columns("CLIENT_MEDICATION")
            Me.columnCLIENT_OTHER_THERAPIES = MyBase.Columns("CLIENT_OTHER_THERAPIES")
            Me.columnCLIENT_RESPONSE = MyBase.Columns("CLIENT_RESPONSE")
            Me.columnCLIENT_RAPPORT_ENGAGEMENT = MyBase.Columns("CLIENT_RAPPORT_ENGAGEMENT")
            Me.columnCLIENT_LIASION = MyBase.Columns("CLIENT_LIASION")
            Me.columnCLIENT_ACTION_PLAN = MyBase.Columns("CLIENT_ACTION_PLAN")
            Me.columnTHERAPIST_ID = MyBase.Columns("THERAPIST_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCLIENT_ASSESS_ID = New Global.System.Data.DataColumn("CLIENT_ASSESS_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_ASSESS_ID)
            Me.columnCLIENT_NO = New Global.System.Data.DataColumn("CLIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_NO)
            Me.columnCLIENT_PRO_DIAGNOSIS = New Global.System.Data.DataColumn("CLIENT_PRO_DIAGNOSIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_PRO_DIAGNOSIS)
            Me.columnCLIENT_MNG_PLAN = New Global.System.Data.DataColumn("CLIENT_MNG_PLAN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_MNG_PLAN)
            Me.columnCLIENT_FINAL_DIAGNOSIS = New Global.System.Data.DataColumn("CLIENT_FINAL_DIAGNOSIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_FINAL_DIAGNOSIS)
            Me.columnCLIENT_ASSESS_DATE = New Global.System.Data.DataColumn("CLIENT_ASSESS_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_ASSESS_DATE)
            Me.columnCLIENT_DATE_REG = New Global.System.Data.DataColumn("CLIENT_DATE_REG", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_DATE_REG)
            Me.columnCLIENT_MEDICATION = New Global.System.Data.DataColumn("CLIENT_MEDICATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_MEDICATION)
            Me.columnCLIENT_OTHER_THERAPIES = New Global.System.Data.DataColumn("CLIENT_OTHER_THERAPIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_OTHER_THERAPIES)
            Me.columnCLIENT_RESPONSE = New Global.System.Data.DataColumn("CLIENT_RESPONSE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_RESPONSE)
            Me.columnCLIENT_RAPPORT_ENGAGEMENT = New Global.System.Data.DataColumn("CLIENT_RAPPORT_ENGAGEMENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_RAPPORT_ENGAGEMENT)
            Me.columnCLIENT_LIASION = New Global.System.Data.DataColumn("CLIENT_LIASION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_LIASION)
            Me.columnCLIENT_ACTION_PLAN = New Global.System.Data.DataColumn("CLIENT_ACTION_PLAN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_ACTION_PLAN)
            Me.columnTHERAPIST_ID = New Global.System.Data.DataColumn("THERAPIST_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHERAPIST_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCLIENT_ASSESS_ID}, true))
            Me.columnCLIENT_ASSESS_ID.AutoIncrement = true
            Me.columnCLIENT_ASSESS_ID.AutoIncrementSeed = -1
            Me.columnCLIENT_ASSESS_ID.AutoIncrementStep = -1
            Me.columnCLIENT_ASSESS_ID.AllowDBNull = false
            Me.columnCLIENT_ASSESS_ID.ReadOnly = true
            Me.columnCLIENT_ASSESS_ID.Unique = true
            Me.columnCLIENT_PRO_DIAGNOSIS.MaxLength = 250
            Me.columnCLIENT_MNG_PLAN.MaxLength = 250
            Me.columnCLIENT_FINAL_DIAGNOSIS.MaxLength = 250
            Me.columnCLIENT_MEDICATION.MaxLength = 250
            Me.columnCLIENT_OTHER_THERAPIES.MaxLength = 250
            Me.columnCLIENT_RESPONSE.MaxLength = 250
            Me.columnCLIENT_RAPPORT_ENGAGEMENT.MaxLength = 250
            Me.columnCLIENT_LIASION.MaxLength = 250
            Me.columnCLIENT_ACTION_PLAN.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCCAMH_CLIENT_ASSESSMENT_INFORow() As CCAMH_CLIENT_ASSESSMENT_INFORow
            Return CType(Me.NewRow,CCAMH_CLIENT_ASSESSMENT_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CCAMH_CLIENT_ASSESSMENT_INFORow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CCAMH_CLIENT_ASSESSMENT_INFORow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CCAMH_CLIENT_ASSESSMENT_INFORowChangedEvent) Is Nothing) Then
                RaiseEvent CCAMH_CLIENT_ASSESSMENT_INFORowChanged(Me, New CCAMH_CLIENT_ASSESSMENT_INFORowChangeEvent(CType(e.Row,CCAMH_CLIENT_ASSESSMENT_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CCAMH_CLIENT_ASSESSMENT_INFORowChangingEvent) Is Nothing) Then
                RaiseEvent CCAMH_CLIENT_ASSESSMENT_INFORowChanging(Me, New CCAMH_CLIENT_ASSESSMENT_INFORowChangeEvent(CType(e.Row,CCAMH_CLIENT_ASSESSMENT_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CCAMH_CLIENT_ASSESSMENT_INFORowDeletedEvent) Is Nothing) Then
                RaiseEvent CCAMH_CLIENT_ASSESSMENT_INFORowDeleted(Me, New CCAMH_CLIENT_ASSESSMENT_INFORowChangeEvent(CType(e.Row,CCAMH_CLIENT_ASSESSMENT_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CCAMH_CLIENT_ASSESSMENT_INFORowDeletingEvent) Is Nothing) Then
                RaiseEvent CCAMH_CLIENT_ASSESSMENT_INFORowDeleting(Me, New CCAMH_CLIENT_ASSESSMENT_INFORowChangeEvent(CType(e.Row,CCAMH_CLIENT_ASSESSMENT_INFORow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCCAMH_CLIENT_ASSESSMENT_INFORow(ByVal row As CCAMH_CLIENT_ASSESSMENT_INFORow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_CCAMH_ASSESSMENTS = New DS_CCAMH_ASSESSMENTS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CCAMH_CLIENT_ASSESSMENT_INFODataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CCAMH_ASSESSMENT_DETAILDataTable
        Inherits Global.System.Data.TypedTableBase(Of CCAMH_ASSESSMENT_DETAILRow)
        
        Private columnREF_ID As Global.System.Data.DataColumn
        
        Private columnCLIENT_NO As Global.System.Data.DataColumn
        
        Private columnASSESS_ID As Global.System.Data.DataColumn
        
        Private columnASSESS_NAME As Global.System.Data.DataColumn
        
        Private columnASSESS_DESCRIPTION As Global.System.Data.DataColumn
        
        Private columnASSESS_COMPLETED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CCAMH_ASSESSMENT_DETAIL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REF_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREF_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASSESS_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASSESS_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASSESS_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASSESS_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASSESS_DESCRIPTIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASSESS_DESCRIPTION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ASSESS_COMPLETEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnASSESS_COMPLETED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CCAMH_ASSESSMENT_DETAILRow
            Get
                Return CType(Me.Rows(index),CCAMH_ASSESSMENT_DETAILRow)
            End Get
        End Property
        
        Public Event CCAMH_ASSESSMENT_DETAILRowChanging As CCAMH_ASSESSMENT_DETAILRowChangeEventHandler
        
        Public Event CCAMH_ASSESSMENT_DETAILRowChanged As CCAMH_ASSESSMENT_DETAILRowChangeEventHandler
        
        Public Event CCAMH_ASSESSMENT_DETAILRowDeleting As CCAMH_ASSESSMENT_DETAILRowChangeEventHandler
        
        Public Event CCAMH_ASSESSMENT_DETAILRowDeleted As CCAMH_ASSESSMENT_DETAILRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCCAMH_ASSESSMENT_DETAILRow(ByVal row As CCAMH_ASSESSMENT_DETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCCAMH_ASSESSMENT_DETAILRow(ByVal CLIENT_NO As Decimal, ByVal ASSESS_ID As Decimal, ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String, ByVal ASSESS_COMPLETED As Boolean) As CCAMH_ASSESSMENT_DETAILRow
            Dim rowCCAMH_ASSESSMENT_DETAILRow As CCAMH_ASSESSMENT_DETAILRow = CType(Me.NewRow,CCAMH_ASSESSMENT_DETAILRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, CLIENT_NO, ASSESS_ID, ASSESS_NAME, ASSESS_DESCRIPTION, ASSESS_COMPLETED}
            rowCCAMH_ASSESSMENT_DETAILRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCCAMH_ASSESSMENT_DETAILRow)
            Return rowCCAMH_ASSESSMENT_DETAILRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByREF_ID(ByVal REF_ID As Decimal) As CCAMH_ASSESSMENT_DETAILRow
            Return CType(Me.Rows.Find(New Object() {REF_ID}),CCAMH_ASSESSMENT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CCAMH_ASSESSMENT_DETAILDataTable = CType(MyBase.Clone,CCAMH_ASSESSMENT_DETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CCAMH_ASSESSMENT_DETAILDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnREF_ID = MyBase.Columns("REF_ID")
            Me.columnCLIENT_NO = MyBase.Columns("CLIENT_NO")
            Me.columnASSESS_ID = MyBase.Columns("ASSESS_ID")
            Me.columnASSESS_NAME = MyBase.Columns("ASSESS_NAME")
            Me.columnASSESS_DESCRIPTION = MyBase.Columns("ASSESS_DESCRIPTION")
            Me.columnASSESS_COMPLETED = MyBase.Columns("ASSESS_COMPLETED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnREF_ID = New Global.System.Data.DataColumn("REF_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREF_ID)
            Me.columnCLIENT_NO = New Global.System.Data.DataColumn("CLIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_NO)
            Me.columnASSESS_ID = New Global.System.Data.DataColumn("ASSESS_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASSESS_ID)
            Me.columnASSESS_NAME = New Global.System.Data.DataColumn("ASSESS_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASSESS_NAME)
            Me.columnASSESS_DESCRIPTION = New Global.System.Data.DataColumn("ASSESS_DESCRIPTION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASSESS_DESCRIPTION)
            Me.columnASSESS_COMPLETED = New Global.System.Data.DataColumn("ASSESS_COMPLETED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnASSESS_COMPLETED)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnREF_ID}, true))
            Me.columnREF_ID.AutoIncrement = true
            Me.columnREF_ID.AutoIncrementSeed = -1
            Me.columnREF_ID.AutoIncrementStep = -1
            Me.columnREF_ID.AllowDBNull = false
            Me.columnREF_ID.ReadOnly = true
            Me.columnREF_ID.Unique = true
            Me.columnASSESS_NAME.MaxLength = 100
            Me.columnASSESS_DESCRIPTION.MaxLength = 250
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCCAMH_ASSESSMENT_DETAILRow() As CCAMH_ASSESSMENT_DETAILRow
            Return CType(Me.NewRow,CCAMH_ASSESSMENT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CCAMH_ASSESSMENT_DETAILRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CCAMH_ASSESSMENT_DETAILRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CCAMH_ASSESSMENT_DETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent CCAMH_ASSESSMENT_DETAILRowChanged(Me, New CCAMH_ASSESSMENT_DETAILRowChangeEvent(CType(e.Row,CCAMH_ASSESSMENT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CCAMH_ASSESSMENT_DETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent CCAMH_ASSESSMENT_DETAILRowChanging(Me, New CCAMH_ASSESSMENT_DETAILRowChangeEvent(CType(e.Row,CCAMH_ASSESSMENT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CCAMH_ASSESSMENT_DETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent CCAMH_ASSESSMENT_DETAILRowDeleted(Me, New CCAMH_ASSESSMENT_DETAILRowChangeEvent(CType(e.Row,CCAMH_ASSESSMENT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CCAMH_ASSESSMENT_DETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent CCAMH_ASSESSMENT_DETAILRowDeleting(Me, New CCAMH_ASSESSMENT_DETAILRowChangeEvent(CType(e.Row,CCAMH_ASSESSMENT_DETAILRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCCAMH_ASSESSMENT_DETAILRow(ByVal row As CCAMH_ASSESSMENT_DETAILRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_CCAMH_ASSESSMENTS = New DS_CCAMH_ASSESSMENTS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CCAMH_ASSESSMENT_DETAILDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CLIENT_CA_SOCIALDataTable
        Inherits Global.System.Data.TypedTableBase(Of CLIENT_CA_SOCIALRow)
        
        Private columnCLIENT_NO As Global.System.Data.DataColumn
        
        Private columnCLIENT_IS_ASSESS_CHECKED As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CLIENT_CA_SOCIAL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_IS_ASSESS_CHECKEDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_IS_ASSESS_CHECKED
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CLIENT_CA_SOCIALRow
            Get
                Return CType(Me.Rows(index),CLIENT_CA_SOCIALRow)
            End Get
        End Property
        
        Public Event CLIENT_CA_SOCIALRowChanging As CLIENT_CA_SOCIALRowChangeEventHandler
        
        Public Event CLIENT_CA_SOCIALRowChanged As CLIENT_CA_SOCIALRowChangeEventHandler
        
        Public Event CLIENT_CA_SOCIALRowDeleting As CLIENT_CA_SOCIALRowChangeEventHandler
        
        Public Event CLIENT_CA_SOCIALRowDeleted As CLIENT_CA_SOCIALRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCLIENT_CA_SOCIALRow(ByVal row As CLIENT_CA_SOCIALRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCLIENT_CA_SOCIALRow(ByVal CLIENT_NO As Decimal, ByVal CLIENT_IS_ASSESS_CHECKED As Boolean) As CLIENT_CA_SOCIALRow
            Dim rowCLIENT_CA_SOCIALRow As CLIENT_CA_SOCIALRow = CType(Me.NewRow,CLIENT_CA_SOCIALRow)
            Dim columnValuesArray() As Object = New Object() {CLIENT_NO, CLIENT_IS_ASSESS_CHECKED}
            rowCLIENT_CA_SOCIALRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCLIENT_CA_SOCIALRow)
            Return rowCLIENT_CA_SOCIALRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CLIENT_CA_SOCIALDataTable = CType(MyBase.Clone,CLIENT_CA_SOCIALDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CLIENT_CA_SOCIALDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCLIENT_NO = MyBase.Columns("CLIENT_NO")
            Me.columnCLIENT_IS_ASSESS_CHECKED = MyBase.Columns("CLIENT_IS_ASSESS_CHECKED")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCLIENT_NO = New Global.System.Data.DataColumn("CLIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_NO)
            Me.columnCLIENT_IS_ASSESS_CHECKED = New Global.System.Data.DataColumn("CLIENT_IS_ASSESS_CHECKED", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_IS_ASSESS_CHECKED)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCLIENT_CA_SOCIALRow() As CLIENT_CA_SOCIALRow
            Return CType(Me.NewRow,CLIENT_CA_SOCIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CLIENT_CA_SOCIALRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CLIENT_CA_SOCIALRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CLIENT_CA_SOCIALRowChangedEvent) Is Nothing) Then
                RaiseEvent CLIENT_CA_SOCIALRowChanged(Me, New CLIENT_CA_SOCIALRowChangeEvent(CType(e.Row,CLIENT_CA_SOCIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CLIENT_CA_SOCIALRowChangingEvent) Is Nothing) Then
                RaiseEvent CLIENT_CA_SOCIALRowChanging(Me, New CLIENT_CA_SOCIALRowChangeEvent(CType(e.Row,CLIENT_CA_SOCIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CLIENT_CA_SOCIALRowDeletedEvent) Is Nothing) Then
                RaiseEvent CLIENT_CA_SOCIALRowDeleted(Me, New CLIENT_CA_SOCIALRowChangeEvent(CType(e.Row,CLIENT_CA_SOCIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CLIENT_CA_SOCIALRowDeletingEvent) Is Nothing) Then
                RaiseEvent CLIENT_CA_SOCIALRowDeleting(Me, New CLIENT_CA_SOCIALRowChangeEvent(CType(e.Row,CLIENT_CA_SOCIALRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCLIENT_CA_SOCIALRow(ByVal row As CLIENT_CA_SOCIALRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_CCAMH_ASSESSMENTS = New DS_CCAMH_ASSESSMENTS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CLIENT_CA_SOCIALDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
        Inherits Global.System.Data.TypedTableBase(Of CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow)
        
        Private columnCLIENT_NO As Global.System.Data.DataColumn
        
        Private columnCLIENT_NAME_KHM As Global.System.Data.DataColumn
        
        Private columnCLIENT_NAME As Global.System.Data.DataColumn
        
        Private columnCLIENT_AGE As Global.System.Data.DataColumn
        
        Private columnCLIENT_SEX As Global.System.Data.DataColumn
        
        Private columnCLIENT_DOB As Global.System.Data.DataColumn
        
        Private columnCLIENT_DATE_REG As Global.System.Data.DataColumn
        
        Private columnCLIENT_PRO_DIAGNOSIS As Global.System.Data.DataColumn
        
        Private columnCLIENT_MNG_PLAN As Global.System.Data.DataColumn
        
        Private columnCLIENT_FINAL_DIAGNOSIS As Global.System.Data.DataColumn
        
        Private columnCLIENT_ASSESS_DATE As Global.System.Data.DataColumn
        
        Private columnExpr1 As Global.System.Data.DataColumn
        
        Private columnCLIENT_MEDICATION As Global.System.Data.DataColumn
        
        Private columnCLIENT_OTHER_THERAPIES As Global.System.Data.DataColumn
        
        Private columnCLIENT_RESPONSE As Global.System.Data.DataColumn
        
        Private columnCLIENT_RAPPORT_ENGAGEMENT As Global.System.Data.DataColumn
        
        Private columnCLIENT_LIASION As Global.System.Data.DataColumn
        
        Private columnCLIENT_ACTION_PLAN As Global.System.Data.DataColumn
        
        Private columnTHERAPIST_ID As Global.System.Data.DataColumn
        
        Private columnTHERAPIST_NAME As Global.System.Data.DataColumn
        
        Private columnTHERAPIST_NOTES As Global.System.Data.DataColumn
        
        Private columnCLIENT_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_NOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_NO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_NAME_KHMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_NAME_KHM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_AGEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_AGE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_SEXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_SEX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_DOBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_DOB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_DATE_REGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_DATE_REG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_PRO_DIAGNOSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_PRO_DIAGNOSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_MNG_PLANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_MNG_PLAN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_FINAL_DIAGNOSISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_FINAL_DIAGNOSIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_ASSESS_DATEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_ASSESS_DATE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Expr1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpr1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_MEDICATIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_MEDICATION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_OTHER_THERAPIESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_OTHER_THERAPIES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_RESPONSEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_RESPONSE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_RAPPORT_ENGAGEMENTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_RAPPORT_ENGAGEMENT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_LIASIONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_LIASION
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_ACTION_PLANColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_ACTION_PLAN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THERAPIST_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHERAPIST_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THERAPIST_NAMEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHERAPIST_NAME
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property THERAPIST_NOTESColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTHERAPIST_NOTES
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLIENT_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLIENT_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow
            Get
                Return CType(Me.Rows(index),CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow)
            End Get
        End Property
        
        Public Event CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChanging As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEventHandler
        
        Public Event CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChanged As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEventHandler
        
        Public Event CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowDeleting As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEventHandler
        
        Public Event CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowDeleted As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow(ByVal row As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow( _
                    ByVal CLIENT_NO As Decimal,  _
                    ByVal CLIENT_NAME_KHM As String,  _
                    ByVal CLIENT_NAME As String,  _
                    ByVal CLIENT_AGE As Decimal,  _
                    ByVal CLIENT_SEX As String,  _
                    ByVal CLIENT_DOB As Date,  _
                    ByVal CLIENT_DATE_REG As Date,  _
                    ByVal CLIENT_PRO_DIAGNOSIS As String,  _
                    ByVal CLIENT_MNG_PLAN As String,  _
                    ByVal CLIENT_FINAL_DIAGNOSIS As String,  _
                    ByVal CLIENT_ASSESS_DATE As Date,  _
                    ByVal Expr1 As Date,  _
                    ByVal CLIENT_MEDICATION As String,  _
                    ByVal CLIENT_OTHER_THERAPIES As String,  _
                    ByVal CLIENT_RESPONSE As String,  _
                    ByVal CLIENT_RAPPORT_ENGAGEMENT As String,  _
                    ByVal CLIENT_LIASION As String,  _
                    ByVal CLIENT_ACTION_PLAN As String,  _
                    ByVal THERAPIST_ID As Decimal,  _
                    ByVal THERAPIST_NAME As String,  _
                    ByVal THERAPIST_NOTES As String,  _
                    ByVal CLIENT_ID As Decimal) As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow
            Dim rowCCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow = CType(Me.NewRow,CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow)
            Dim columnValuesArray() As Object = New Object() {CLIENT_NO, CLIENT_NAME_KHM, CLIENT_NAME, CLIENT_AGE, CLIENT_SEX, CLIENT_DOB, CLIENT_DATE_REG, CLIENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN, CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSESS_DATE, Expr1, CLIENT_MEDICATION, CLIENT_OTHER_THERAPIES, CLIENT_RESPONSE, CLIENT_RAPPORT_ENGAGEMENT, CLIENT_LIASION, CLIENT_ACTION_PLAN, THERAPIST_ID, THERAPIST_NAME, THERAPIST_NOTES, CLIENT_ID}
            rowCCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow)
            Return rowCCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCLIENT_NO(ByVal CLIENT_NO As Decimal) As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow
            Return CType(Me.Rows.Find(New Object() {CLIENT_NO}),CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable = CType(MyBase.Clone,CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCLIENT_NO = MyBase.Columns("CLIENT_NO")
            Me.columnCLIENT_NAME_KHM = MyBase.Columns("CLIENT_NAME_KHM")
            Me.columnCLIENT_NAME = MyBase.Columns("CLIENT_NAME")
            Me.columnCLIENT_AGE = MyBase.Columns("CLIENT_AGE")
            Me.columnCLIENT_SEX = MyBase.Columns("CLIENT_SEX")
            Me.columnCLIENT_DOB = MyBase.Columns("CLIENT_DOB")
            Me.columnCLIENT_DATE_REG = MyBase.Columns("CLIENT_DATE_REG")
            Me.columnCLIENT_PRO_DIAGNOSIS = MyBase.Columns("CLIENT_PRO_DIAGNOSIS")
            Me.columnCLIENT_MNG_PLAN = MyBase.Columns("CLIENT_MNG_PLAN")
            Me.columnCLIENT_FINAL_DIAGNOSIS = MyBase.Columns("CLIENT_FINAL_DIAGNOSIS")
            Me.columnCLIENT_ASSESS_DATE = MyBase.Columns("CLIENT_ASSESS_DATE")
            Me.columnExpr1 = MyBase.Columns("Expr1")
            Me.columnCLIENT_MEDICATION = MyBase.Columns("CLIENT_MEDICATION")
            Me.columnCLIENT_OTHER_THERAPIES = MyBase.Columns("CLIENT_OTHER_THERAPIES")
            Me.columnCLIENT_RESPONSE = MyBase.Columns("CLIENT_RESPONSE")
            Me.columnCLIENT_RAPPORT_ENGAGEMENT = MyBase.Columns("CLIENT_RAPPORT_ENGAGEMENT")
            Me.columnCLIENT_LIASION = MyBase.Columns("CLIENT_LIASION")
            Me.columnCLIENT_ACTION_PLAN = MyBase.Columns("CLIENT_ACTION_PLAN")
            Me.columnTHERAPIST_ID = MyBase.Columns("THERAPIST_ID")
            Me.columnTHERAPIST_NAME = MyBase.Columns("THERAPIST_NAME")
            Me.columnTHERAPIST_NOTES = MyBase.Columns("THERAPIST_NOTES")
            Me.columnCLIENT_ID = MyBase.Columns("CLIENT_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCLIENT_NO = New Global.System.Data.DataColumn("CLIENT_NO", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_NO)
            Me.columnCLIENT_NAME_KHM = New Global.System.Data.DataColumn("CLIENT_NAME_KHM", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_NAME_KHM)
            Me.columnCLIENT_NAME = New Global.System.Data.DataColumn("CLIENT_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_NAME)
            Me.columnCLIENT_AGE = New Global.System.Data.DataColumn("CLIENT_AGE", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_AGE)
            Me.columnCLIENT_SEX = New Global.System.Data.DataColumn("CLIENT_SEX", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_SEX)
            Me.columnCLIENT_DOB = New Global.System.Data.DataColumn("CLIENT_DOB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_DOB)
            Me.columnCLIENT_DATE_REG = New Global.System.Data.DataColumn("CLIENT_DATE_REG", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_DATE_REG)
            Me.columnCLIENT_PRO_DIAGNOSIS = New Global.System.Data.DataColumn("CLIENT_PRO_DIAGNOSIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_PRO_DIAGNOSIS)
            Me.columnCLIENT_MNG_PLAN = New Global.System.Data.DataColumn("CLIENT_MNG_PLAN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_MNG_PLAN)
            Me.columnCLIENT_FINAL_DIAGNOSIS = New Global.System.Data.DataColumn("CLIENT_FINAL_DIAGNOSIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_FINAL_DIAGNOSIS)
            Me.columnCLIENT_ASSESS_DATE = New Global.System.Data.DataColumn("CLIENT_ASSESS_DATE", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_ASSESS_DATE)
            Me.columnExpr1 = New Global.System.Data.DataColumn("Expr1", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpr1)
            Me.columnCLIENT_MEDICATION = New Global.System.Data.DataColumn("CLIENT_MEDICATION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_MEDICATION)
            Me.columnCLIENT_OTHER_THERAPIES = New Global.System.Data.DataColumn("CLIENT_OTHER_THERAPIES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_OTHER_THERAPIES)
            Me.columnCLIENT_RESPONSE = New Global.System.Data.DataColumn("CLIENT_RESPONSE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_RESPONSE)
            Me.columnCLIENT_RAPPORT_ENGAGEMENT = New Global.System.Data.DataColumn("CLIENT_RAPPORT_ENGAGEMENT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_RAPPORT_ENGAGEMENT)
            Me.columnCLIENT_LIASION = New Global.System.Data.DataColumn("CLIENT_LIASION", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_LIASION)
            Me.columnCLIENT_ACTION_PLAN = New Global.System.Data.DataColumn("CLIENT_ACTION_PLAN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_ACTION_PLAN)
            Me.columnTHERAPIST_ID = New Global.System.Data.DataColumn("THERAPIST_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHERAPIST_ID)
            Me.columnTHERAPIST_NAME = New Global.System.Data.DataColumn("THERAPIST_NAME", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHERAPIST_NAME)
            Me.columnTHERAPIST_NOTES = New Global.System.Data.DataColumn("THERAPIST_NOTES", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTHERAPIST_NOTES)
            Me.columnCLIENT_ID = New Global.System.Data.DataColumn("CLIENT_ID", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLIENT_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCLIENT_NO}, true))
            Me.columnCLIENT_NO.AllowDBNull = false
            Me.columnCLIENT_NO.Unique = true
            Me.columnCLIENT_NAME_KHM.MaxLength = 100
            Me.columnCLIENT_NAME.MaxLength = 100
            Me.columnCLIENT_SEX.MaxLength = 1
            Me.columnCLIENT_PRO_DIAGNOSIS.MaxLength = 250
            Me.columnCLIENT_MNG_PLAN.MaxLength = 250
            Me.columnCLIENT_FINAL_DIAGNOSIS.MaxLength = 250
            Me.columnCLIENT_MEDICATION.MaxLength = 250
            Me.columnCLIENT_OTHER_THERAPIES.MaxLength = 250
            Me.columnCLIENT_RESPONSE.MaxLength = 250
            Me.columnCLIENT_RAPPORT_ENGAGEMENT.MaxLength = 250
            Me.columnCLIENT_LIASION.MaxLength = 250
            Me.columnCLIENT_ACTION_PLAN.MaxLength = 250
            Me.columnTHERAPIST_NAME.MaxLength = 100
            Me.columnTHERAPIST_NOTES.MaxLength = 250
            Me.columnCLIENT_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow() As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow
            Return CType(Me.NewRow,CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangedEvent) Is Nothing) Then
                RaiseEvent CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChanged(Me, New CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEvent(CType(e.Row,CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangingEvent) Is Nothing) Then
                RaiseEvent CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChanging(Me, New CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEvent(CType(e.Row,CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowDeleted(Me, New CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEvent(CType(e.Row,CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowDeleting(Me, New CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEvent(CType(e.Row,CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow(ByVal row As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DS_CCAMH_ASSESSMENTS = New DS_CCAMH_ASSESSMENTS
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CCAMH_ASSESSMENTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCCAMH_ASSESSMENTS As CCAMH_ASSESSMENTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCCAMH_ASSESSMENTS = CType(Me.Table,CCAMH_ASSESSMENTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASSESS_ID() As Decimal
            Get
                Return CType(Me(Me.tableCCAMH_ASSESSMENTS.ASSESS_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCCAMH_ASSESSMENTS.ASSESS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASSESS_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_ASSESSMENTS.ASSESS_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ASSESS_NAME' in table 'CCAMH_ASSESSMENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_ASSESSMENTS.ASSESS_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASSESS_DESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_ASSESSMENTS.ASSESS_DESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ASSESS_DESCRIPTION' in table 'CCAMH_ASSESSMENTS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_ASSESSMENTS.ASSESS_DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsASSESS_NAMENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_ASSESSMENTS.ASSESS_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetASSESS_NAMENull()
            Me(Me.tableCCAMH_ASSESSMENTS.ASSESS_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsASSESS_DESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_ASSESSMENTS.ASSESS_DESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetASSESS_DESCRIPTIONNull()
            Me(Me.tableCCAMH_ASSESSMENTS.ASSESS_DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CCAMH_VIEW_CHIEFCOMPLAINTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCCAMH_VIEW_CHIEFCOMPLAINTS As CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS = CType(Me.Table,CCAMH_VIEW_CHIEFCOMPLAINTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.CLIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_NO' in table 'CCAMH_VIEW_CHIEFCOMPLAINTS' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.CLIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYMPTOM_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.SYMPTOM_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SYMPTOM_NAME' in table 'CCAMH_VIEW_CHIEFCOMPLAINTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.SYMPTOM_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.DESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DESCRIPTION' in table 'CCAMH_VIEW_CHIEFCOMPLAINTS' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYMP_TYPE() As String
            Get
                Return CType(Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.SYMP_TYPEColumn),String)
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.SYMP_TYPEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.CLIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_NONull()
            Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.CLIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYMPTOM_NAMENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.SYMPTOM_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYMPTOM_NAMENull()
            Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.SYMPTOM_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.DESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tableCCAMH_VIEW_CHIEFCOMPLAINTS.DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CCAMH_CLIENT_ASSESSMENT_INFORow
        Inherits Global.System.Data.DataRow
        
        Private tableCCAMH_CLIENT_ASSESSMENT_INFO As CCAMH_CLIENT_ASSESSMENT_INFODataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCCAMH_CLIENT_ASSESSMENT_INFO = CType(Me.Table,CCAMH_CLIENT_ASSESSMENT_INFODataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_ASSESS_ID() As Decimal
            Get
                Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ASSESS_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ASSESS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_NO' in table 'CCAMH_CLIENT_ASSESSMENT_INFO' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_PRO_DIAGNOSIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_PRO_DIAGNOSISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_PRO_DIAGNOSIS' in table 'CCAMH_CLIENT_ASSESSMENT_INF"& _ 
                            "O' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_PRO_DIAGNOSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_MNG_PLAN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_MNG_PLANColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_MNG_PLAN' in table 'CCAMH_CLIENT_ASSESSMENT_INFO' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_MNG_PLANColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_FINAL_DIAGNOSIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_FINAL_DIAGNOSISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_FINAL_DIAGNOSIS' in table 'CCAMH_CLIENT_ASSESSMENT_I"& _ 
                            "NFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_FINAL_DIAGNOSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_ASSESS_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ASSESS_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_ASSESS_DATE' in table 'CCAMH_CLIENT_ASSESSMENT_INFO'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ASSESS_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_DATE_REG() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_DATE_REGColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_DATE_REG' in table 'CCAMH_CLIENT_ASSESSMENT_INFO' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_DATE_REGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_MEDICATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_MEDICATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_MEDICATION' in table 'CCAMH_CLIENT_ASSESSMENT_INFO' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_MEDICATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_OTHER_THERAPIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_OTHER_THERAPIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_OTHER_THERAPIES' in table 'CCAMH_CLIENT_ASSESSMENT_I"& _ 
                            "NFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_OTHER_THERAPIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_RESPONSE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_RESPONSEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_RESPONSE' in table 'CCAMH_CLIENT_ASSESSMENT_INFO' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_RESPONSEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_RAPPORT_ENGAGEMENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_RAPPORT_ENGAGEMENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_RAPPORT_ENGAGEMENT' in table 'CCAMH_CLIENT_ASSESSMEN"& _ 
                            "T_INFO' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_RAPPORT_ENGAGEMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_LIASION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_LIASIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_LIASION' in table 'CCAMH_CLIENT_ASSESSMENT_INFO' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_LIASIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_ACTION_PLAN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ACTION_PLANColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_ACTION_PLAN' in table 'CCAMH_CLIENT_ASSESSMENT_INFO'"& _ 
                            " is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ACTION_PLANColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THERAPIST_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.THERAPIST_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THERAPIST_ID' in table 'CCAMH_CLIENT_ASSESSMENT_INFO' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.THERAPIST_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_NONull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_PRO_DIAGNOSISNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_PRO_DIAGNOSISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_PRO_DIAGNOSISNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_PRO_DIAGNOSISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_MNG_PLANNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_MNG_PLANColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_MNG_PLANNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_MNG_PLANColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_FINAL_DIAGNOSISNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_FINAL_DIAGNOSISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_FINAL_DIAGNOSISNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_FINAL_DIAGNOSISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_ASSESS_DATENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ASSESS_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_ASSESS_DATENull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ASSESS_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_DATE_REGNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_DATE_REGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_DATE_REGNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_DATE_REGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_MEDICATIONNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_MEDICATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_MEDICATIONNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_MEDICATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_OTHER_THERAPIESNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_OTHER_THERAPIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_OTHER_THERAPIESNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_OTHER_THERAPIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_RESPONSENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_RESPONSEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_RESPONSENull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_RESPONSEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_RAPPORT_ENGAGEMENTNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_RAPPORT_ENGAGEMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_RAPPORT_ENGAGEMENTNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_RAPPORT_ENGAGEMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_LIASIONNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_LIASIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_LIASIONNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_LIASIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_ACTION_PLANNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ACTION_PLANColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_ACTION_PLANNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.CLIENT_ACTION_PLANColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHERAPIST_IDNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.THERAPIST_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHERAPIST_IDNull()
            Me(Me.tableCCAMH_CLIENT_ASSESSMENT_INFO.THERAPIST_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CCAMH_ASSESSMENT_DETAILRow
        Inherits Global.System.Data.DataRow
        
        Private tableCCAMH_ASSESSMENT_DETAIL As CCAMH_ASSESSMENT_DETAILDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCCAMH_ASSESSMENT_DETAIL = CType(Me.Table,CCAMH_ASSESSMENT_DETAILDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REF_ID() As Decimal
            Get
                Return CType(Me(Me.tableCCAMH_ASSESSMENT_DETAIL.REF_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCCAMH_ASSESSMENT_DETAIL.REF_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_ASSESSMENT_DETAIL.CLIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_NO' in table 'CCAMH_ASSESSMENT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_ASSESSMENT_DETAIL.CLIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASSESS_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ASSESS_ID' in table 'CCAMH_ASSESSMENT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASSESS_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ASSESS_NAME' in table 'CCAMH_ASSESSMENT_DETAIL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASSESS_DESCRIPTION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_DESCRIPTIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ASSESS_DESCRIPTION' in table 'CCAMH_ASSESSMENT_DETAIL' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_DESCRIPTIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ASSESS_COMPLETED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_COMPLETEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ASSESS_COMPLETED' in table 'CCAMH_ASSESSMENT_DETAIL' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_COMPLETEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_ASSESSMENT_DETAIL.CLIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_NONull()
            Me(Me.tableCCAMH_ASSESSMENT_DETAIL.CLIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsASSESS_IDNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetASSESS_IDNull()
            Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsASSESS_NAMENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetASSESS_NAMENull()
            Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsASSESS_DESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_DESCRIPTIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetASSESS_DESCRIPTIONNull()
            Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_DESCRIPTIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsASSESS_COMPLETEDNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_COMPLETEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetASSESS_COMPLETEDNull()
            Me(Me.tableCCAMH_ASSESSMENT_DETAIL.ASSESS_COMPLETEDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CLIENT_CA_SOCIALRow
        Inherits Global.System.Data.DataRow
        
        Private tableCLIENT_CA_SOCIAL As CLIENT_CA_SOCIALDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCLIENT_CA_SOCIAL = CType(Me.Table,CLIENT_CA_SOCIALDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_NO() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCLIENT_CA_SOCIAL.CLIENT_NOColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_NO' in table 'CLIENT_CA_SOCIAL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCLIENT_CA_SOCIAL.CLIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_IS_ASSESS_CHECKED() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCLIENT_CA_SOCIAL.CLIENT_IS_ASSESS_CHECKEDColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_IS_ASSESS_CHECKED' in table 'CLIENT_CA_SOCIAL' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableCLIENT_CA_SOCIAL.CLIENT_IS_ASSESS_CHECKEDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_NONull() As Boolean
            Return Me.IsNull(Me.tableCLIENT_CA_SOCIAL.CLIENT_NOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_NONull()
            Me(Me.tableCLIENT_CA_SOCIAL.CLIENT_NOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_IS_ASSESS_CHECKEDNull() As Boolean
            Return Me.IsNull(Me.tableCLIENT_CA_SOCIAL.CLIENT_IS_ASSESS_CHECKEDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_IS_ASSESS_CHECKEDNull()
            Me(Me.tableCLIENT_CA_SOCIAL.CLIENT_IS_ASSESS_CHECKEDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow
        Inherits Global.System.Data.DataRow
        
        Private tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS = CType(Me.Table,CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_NO() As Decimal
            Get
                Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NOColumn),Decimal)
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_NAME_KHM() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NAME_KHMColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_NAME_KHM' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENT"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NAME_KHMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_NAME' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_AGE() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_AGEColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_AGE' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_AGEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_SEX() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_SEXColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_SEX' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_SEXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_DOB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_DOBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_DOB' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_DOBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_DATE_REG() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_DATE_REGColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_DATE_REG' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENT"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_DATE_REGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_PRO_DIAGNOSIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_PRO_DIAGNOSISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_PRO_DIAGNOSIS' in table 'CCAMH_VIEW_ACTIVE_ADVISED_C"& _ 
                            "LIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_PRO_DIAGNOSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_MNG_PLAN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_MNG_PLANColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_MNG_PLAN' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENT"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_MNG_PLANColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_FINAL_DIAGNOSIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_FINAL_DIAGNOSISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_FINAL_DIAGNOSIS' in table 'CCAMH_VIEW_ACTIVE_ADVISED"& _ 
                            "_CLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_FINAL_DIAGNOSISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_ASSESS_DATE() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_ASSESS_DATEColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_ASSESS_DATE' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLI"& _ 
                            "ENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_ASSESS_DATEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expr1() As Date
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.Expr1Column),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expr1' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.Expr1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_MEDICATION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_MEDICATIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_MEDICATION' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIE"& _ 
                            "NTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_MEDICATIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_OTHER_THERAPIES() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_OTHER_THERAPIESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_OTHER_THERAPIES' in table 'CCAMH_VIEW_ACTIVE_ADVISED"& _ 
                            "_CLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_OTHER_THERAPIESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_RESPONSE() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_RESPONSEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_RESPONSE' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENT"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_RESPONSEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_RAPPORT_ENGAGEMENT() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_RAPPORT_ENGAGEMENTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_RAPPORT_ENGAGEMENT' in table 'CCAMH_VIEW_ACTIVE_ADVI"& _ 
                            "SED_CLIENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_RAPPORT_ENGAGEMENTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_LIASION() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_LIASIONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_LIASION' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_LIASIONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_ACTION_PLAN() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_ACTION_PLANColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CLIENT_ACTION_PLAN' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLI"& _ 
                            "ENTS' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_ACTION_PLANColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THERAPIST_ID() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_IDColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THERAPIST_ID' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THERAPIST_NAME() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_NAMEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THERAPIST_NAME' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_NAMEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property THERAPIST_NOTES() As String
            Get
                Try 
                    Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_NOTESColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'THERAPIST_NOTES' in table 'CCAMH_VIEW_ACTIVE_ADVISED_CLIENT"& _ 
                            "S' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_NOTESColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLIENT_ID() As Decimal
            Get
                Return CType(Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_IDColumn),Decimal)
            End Get
            Set
                Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_NAME_KHMNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NAME_KHMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_NAME_KHMNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NAME_KHMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_NAMENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_NAMENull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_AGENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_AGEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_AGENull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_AGEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_SEXNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_SEXColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_SEXNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_SEXColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_DOBNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_DOBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_DOBNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_DOBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_DATE_REGNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_DATE_REGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_DATE_REGNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_DATE_REGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_PRO_DIAGNOSISNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_PRO_DIAGNOSISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_PRO_DIAGNOSISNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_PRO_DIAGNOSISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_MNG_PLANNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_MNG_PLANColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_MNG_PLANNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_MNG_PLANColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_FINAL_DIAGNOSISNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_FINAL_DIAGNOSISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_FINAL_DIAGNOSISNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_FINAL_DIAGNOSISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_ASSESS_DATENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_ASSESS_DATEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_ASSESS_DATENull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_ASSESS_DATEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpr1Null() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.Expr1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpr1Null()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.Expr1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_MEDICATIONNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_MEDICATIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_MEDICATIONNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_MEDICATIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_OTHER_THERAPIESNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_OTHER_THERAPIESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_OTHER_THERAPIESNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_OTHER_THERAPIESColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_RESPONSENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_RESPONSEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_RESPONSENull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_RESPONSEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_RAPPORT_ENGAGEMENTNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_RAPPORT_ENGAGEMENTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_RAPPORT_ENGAGEMENTNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_RAPPORT_ENGAGEMENTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_LIASIONNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_LIASIONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_LIASIONNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_LIASIONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLIENT_ACTION_PLANNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_ACTION_PLANColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLIENT_ACTION_PLANNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.CLIENT_ACTION_PLANColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHERAPIST_IDNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHERAPIST_IDNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHERAPIST_NAMENull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_NAMEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHERAPIST_NAMENull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_NAMEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTHERAPIST_NOTESNull() As Boolean
            Return Me.IsNull(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_NOTESColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTHERAPIST_NOTESNull()
            Me(Me.tableCCAMH_VIEW_ACTIVE_ADVISED_CLIENTS.THERAPIST_NOTESColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CCAMH_ASSESSMENTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CCAMH_ASSESSMENTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CCAMH_ASSESSMENTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CCAMH_ASSESSMENTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CCAMH_VIEW_CHIEFCOMPLAINTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CCAMH_VIEW_CHIEFCOMPLAINTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CCAMH_VIEW_CHIEFCOMPLAINTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CCAMH_VIEW_CHIEFCOMPLAINTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CCAMH_CLIENT_ASSESSMENT_INFORowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CCAMH_CLIENT_ASSESSMENT_INFORow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CCAMH_CLIENT_ASSESSMENT_INFORow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CCAMH_CLIENT_ASSESSMENT_INFORow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CCAMH_ASSESSMENT_DETAILRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CCAMH_ASSESSMENT_DETAILRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CCAMH_ASSESSMENT_DETAILRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CCAMH_ASSESSMENT_DETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CLIENT_CA_SOCIALRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CLIENT_CA_SOCIALRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CLIENT_CA_SOCIALRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CLIENT_CA_SOCIALRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DS_CCAMH_ASSESSMENTSTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CCAMH_ASSESSMENTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CCAMH_ASSESSMENTS"
            tableMapping.ColumnMappings.Add("ASSESS_ID", "ASSESS_ID")
            tableMapping.ColumnMappings.Add("ASSESS_NAME", "ASSESS_NAME")
            tableMapping.ColumnMappings.Add("ASSESS_DESCRIPTION", "ASSESS_DESCRIPTION")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [CCAMH_ASSESSMENTS] WHERE (([ASSESS_ID] = @Original_ASSESS_ID) AND (("& _ 
                "@IsNull_ASSESS_NAME = 1 AND [ASSESS_NAME] IS NULL) OR ([ASSESS_NAME] = @Original"& _ 
                "_ASSESS_NAME)) AND ((@IsNull_ASSESS_DESCRIPTION = 1 AND [ASSESS_DESCRIPTION] IS "& _ 
                "NULL) OR ([ASSESS_DESCRIPTION] = @Original_ASSESS_DESCRIPTION)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CCAMH_ASSESSMENTS] ([ASSESS_NAME], [ASSESS_DESCRIPTION]) VALUES (@AS"& _ 
                "SESS_NAME, @ASSESS_DESCRIPTION);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ASSESS_ID, ASSESS_NAME, ASSESS_DESCRIPT"& _ 
                "ION FROM CCAMH_ASSESSMENTS WHERE (ASSESS_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [CCAMH_ASSESSMENTS] SET [ASSESS_NAME] = @ASSESS_NAME, [ASSESS_DESCRIPTION]"& _ 
                " = @ASSESS_DESCRIPTION WHERE (([ASSESS_ID] = @Original_ASSESS_ID) AND ((@IsNull_"& _ 
                "ASSESS_NAME = 1 AND [ASSESS_NAME] IS NULL) OR ([ASSESS_NAME] = @Original_ASSESS_"& _ 
                "NAME)) AND ((@IsNull_ASSESS_DESCRIPTION = 1 AND [ASSESS_DESCRIPTION] IS NULL) OR"& _ 
                " ([ASSESS_DESCRIPTION] = @Original_ASSESS_DESCRIPTION)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ASSESS_ID, ASS"& _ 
                "ESS_NAME, ASSESS_DESCRIPTION FROM CCAMH_ASSESSMENTS WHERE (ASSESS_ID = @ASSESS_I"& _ 
                "D)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.KTGSYS.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        ASSESS_ID, ASSESS_NAME, ASSESS_DESCRIPTION"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CCAMH_A"& _ 
                "SSESSMENTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENTSDataTable = New DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENTSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENTSDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_CCAMH_ASSESSMENTS) As Integer
            Return Me.Adapter.Update(dataSet, "CCAMH_ASSESSMENTS")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ASSESS_ID As Decimal, ByVal Original_ASSESS_NAME As String, ByVal Original_ASSESS_DESCRIPTION As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ASSESS_ID,Decimal)
            If (Original_ASSESS_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ASSESS_NAME,String)
            End If
            If (Original_ASSESS_DESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ASSESS_DESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String) As Integer
            If (ASSESS_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ASSESS_NAME,String)
            End If
            If (ASSESS_DESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ASSESS_DESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String, ByVal Original_ASSESS_ID As Decimal, ByVal Original_ASSESS_NAME As String, ByVal Original_ASSESS_DESCRIPTION As String, ByVal ASSESS_ID As Decimal) As Integer
            If (ASSESS_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ASSESS_NAME,String)
            End If
            If (ASSESS_DESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ASSESS_DESCRIPTION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ASSESS_ID,Decimal)
            If (Original_ASSESS_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ASSESS_NAME,String)
            End If
            If (Original_ASSESS_DESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ASSESS_DESCRIPTION,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(ASSESS_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String, ByVal Original_ASSESS_ID As Decimal, ByVal Original_ASSESS_NAME As String, ByVal Original_ASSESS_DESCRIPTION As String) As Integer
            Return Me.Update(ASSESS_NAME, ASSESS_DESCRIPTION, Original_ASSESS_ID, Original_ASSESS_NAME, Original_ASSESS_DESCRIPTION, Original_ASSESS_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CCAMH_VIEW_CHIEFCOMPLAINTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CCAMH_VIEW_CHIEFCOMPLAINTS"
            tableMapping.ColumnMappings.Add("CLIENT_NO", "CLIENT_NO")
            tableMapping.ColumnMappings.Add("SYMPTOM_NAME", "SYMPTOM_NAME")
            tableMapping.ColumnMappings.Add("DESCRIPTION", "DESCRIPTION")
            tableMapping.ColumnMappings.Add("SYMP_TYPE", "SYMP_TYPE")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.KTGSYS.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CLIENT_NO, SYMPTOM_NAME, DESCRIPTION, SYMP_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CC"& _ 
                "AMH_VIEW_CHIEFCOMPLAINTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CLIENT_NO, SYMPTOM_NAME, DESCRIPTION, SYMP_TYPE"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CC"& _ 
                "AMH_VIEW_CHIEFCOMPLAINTS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CLIENT_NO = @CLIENT_NO)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_CHIEFCOMPLAINTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_CHIEFCOMPLAINTSDataTable = New DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_CHIEFCOMPLAINTSDataTable, ByVal CLIENT_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByClientNo(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal)) As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_CHIEFCOMPLAINTSDataTable = New DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_CHIEFCOMPLAINTSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CCAMH_CLIENT_ASSESSMENT_INFOTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CCAMH_CLIENT_ASSESSMENT_INFO"
            tableMapping.ColumnMappings.Add("CLIENT_ASSESS_ID", "CLIENT_ASSESS_ID")
            tableMapping.ColumnMappings.Add("CLIENT_NO", "CLIENT_NO")
            tableMapping.ColumnMappings.Add("CLIENT_PRO_DIAGNOSIS", "CLIENT_PRO_DIAGNOSIS")
            tableMapping.ColumnMappings.Add("CLIENT_MNG_PLAN", "CLIENT_MNG_PLAN")
            tableMapping.ColumnMappings.Add("CLIENT_FINAL_DIAGNOSIS", "CLIENT_FINAL_DIAGNOSIS")
            tableMapping.ColumnMappings.Add("CLIENT_ASSESS_DATE", "CLIENT_ASSESS_DATE")
            tableMapping.ColumnMappings.Add("CLIENT_DATE_REG", "CLIENT_DATE_REG")
            tableMapping.ColumnMappings.Add("CLIENT_MEDICATION", "CLIENT_MEDICATION")
            tableMapping.ColumnMappings.Add("CLIENT_OTHER_THERAPIES", "CLIENT_OTHER_THERAPIES")
            tableMapping.ColumnMappings.Add("CLIENT_RESPONSE", "CLIENT_RESPONSE")
            tableMapping.ColumnMappings.Add("CLIENT_RAPPORT_ENGAGEMENT", "CLIENT_RAPPORT_ENGAGEMENT")
            tableMapping.ColumnMappings.Add("CLIENT_LIASION", "CLIENT_LIASION")
            tableMapping.ColumnMappings.Add("CLIENT_ACTION_PLAN", "CLIENT_ACTION_PLAN")
            tableMapping.ColumnMappings.Add("THERAPIST_ID", "THERAPIST_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [CCAMH_CLIENT_ASSESSMENT_INFO] WHERE (([CLIENT_ASSESS_ID] = @Original"& _ 
                "_CLIENT_ASSESS_ID) AND ((@IsNull_CLIENT_NO = 1 AND [CLIENT_NO] IS NULL) OR ([CLI"& _ 
                "ENT_NO] = @Original_CLIENT_NO)) AND ((@IsNull_CLIENT_PRO_DIAGNOSIS = 1 AND [CLIE"& _ 
                "NT_PRO_DIAGNOSIS] IS NULL) OR ([CLIENT_PRO_DIAGNOSIS] = @Original_CLIENT_PRO_DIA"& _ 
                "GNOSIS)) AND ((@IsNull_CLIENT_MNG_PLAN = 1 AND [CLIENT_MNG_PLAN] IS NULL) OR ([C"& _ 
                "LIENT_MNG_PLAN] = @Original_CLIENT_MNG_PLAN)) AND ((@IsNull_CLIENT_FINAL_DIAGNOS"& _ 
                "IS = 1 AND [CLIENT_FINAL_DIAGNOSIS] IS NULL) OR ([CLIENT_FINAL_DIAGNOSIS] = @Ori"& _ 
                "ginal_CLIENT_FINAL_DIAGNOSIS)) AND ((@IsNull_CLIENT_ASSESS_DATE = 1 AND [CLIENT_"& _ 
                "ASSESS_DATE] IS NULL) OR ([CLIENT_ASSESS_DATE] = @Original_CLIENT_ASSESS_DATE)) "& _ 
                "AND ((@IsNull_CLIENT_DATE_REG = 1 AND [CLIENT_DATE_REG] IS NULL) OR ([CLIENT_DAT"& _ 
                "E_REG] = @Original_CLIENT_DATE_REG)) AND ((@IsNull_CLIENT_MEDICATION = 1 AND [CL"& _ 
                "IENT_MEDICATION] IS NULL) OR ([CLIENT_MEDICATION] = @Original_CLIENT_MEDICATION)"& _ 
                ") AND ((@IsNull_CLIENT_OTHER_THERAPIES = 1 AND [CLIENT_OTHER_THERAPIES] IS NULL)"& _ 
                " OR ([CLIENT_OTHER_THERAPIES] = @Original_CLIENT_OTHER_THERAPIES)) AND ((@IsNull"& _ 
                "_CLIENT_RESPONSE = 1 AND [CLIENT_RESPONSE] IS NULL) OR ([CLIENT_RESPONSE] = @Ori"& _ 
                "ginal_CLIENT_RESPONSE)) AND ((@IsNull_CLIENT_RAPPORT_ENGAGEMENT = 1 AND [CLIENT_"& _ 
                "RAPPORT_ENGAGEMENT] IS NULL) OR ([CLIENT_RAPPORT_ENGAGEMENT] = @Original_CLIENT_"& _ 
                "RAPPORT_ENGAGEMENT)) AND ((@IsNull_CLIENT_LIASION = 1 AND [CLIENT_LIASION] IS NU"& _ 
                "LL) OR ([CLIENT_LIASION] = @Original_CLIENT_LIASION)) AND ((@IsNull_CLIENT_ACTIO"& _ 
                "N_PLAN = 1 AND [CLIENT_ACTION_PLAN] IS NULL) OR ([CLIENT_ACTION_PLAN] = @Origina"& _ 
                "l_CLIENT_ACTION_PLAN)) AND ((@IsNull_THERAPIST_ID = 1 AND [THERAPIST_ID] IS NULL"& _ 
                ") OR ([THERAPIST_ID] = @Original_THERAPIST_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_ASSESS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_PRO_DIAGNOSIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_PRO_DIAGNOSIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_PRO_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_PRO_DIAGNOSIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_MNG_PLAN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MNG_PLAN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_MNG_PLAN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MNG_PLAN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_FINAL_DIAGNOSIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_FINAL_DIAGNOSIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_FINAL_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_FINAL_DIAGNOSIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_ASSESS_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ASSESS_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_ASSESS_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ASSESS_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_DATE_REG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_DATE_REG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_DATE_REG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_DATE_REG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_MEDICATION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MEDICATION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_MEDICATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MEDICATION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_OTHER_THERAPIES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_OTHER_THERAPIES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_OTHER_THERAPIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_OTHER_THERAPIES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_RESPONSE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RESPONSE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_RESPONSE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RESPONSE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_LIASION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_LIASION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_LIASION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_LIASION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_ACTION_PLAN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ACTION_PLAN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_ACTION_PLAN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ACTION_PLAN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THERAPIST_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERAPIST_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THERAPIST_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "THERAPIST_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CCAMH_CLIENT_ASSESSMENT_INFO] ([CLIENT_NO], [CLIENT_PRO_DIAGNOSIS], "& _ 
                "[CLIENT_MNG_PLAN], [CLIENT_FINAL_DIAGNOSIS], [CLIENT_ASSESS_DATE], [CLIENT_DATE_"& _ 
                "REG], [CLIENT_MEDICATION], [CLIENT_OTHER_THERAPIES], [CLIENT_RESPONSE], [CLIENT_"& _ 
                "RAPPORT_ENGAGEMENT], [CLIENT_LIASION], [CLIENT_ACTION_PLAN], [THERAPIST_ID]) VAL"& _ 
                "UES (@CLIENT_NO, @CLIENT_PRO_DIAGNOSIS, @CLIENT_MNG_PLAN, @CLIENT_FINAL_DIAGNOSI"& _ 
                "S, @CLIENT_ASSESS_DATE, @CLIENT_DATE_REG, @CLIENT_MEDICATION, @CLIENT_OTHER_THER"& _ 
                "APIES, @CLIENT_RESPONSE, @CLIENT_RAPPORT_ENGAGEMENT, @CLIENT_LIASION, @CLIENT_AC"& _ 
                "TION_PLAN, @THERAPIST_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CLIENT_ASSESS_ID, CLIENT_NO, CLIENT_PRO_DIAGN"& _ 
                "OSIS, CLIENT_MNG_PLAN, CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSESS_DATE, CLIENT_DATE_R"& _ 
                "EG, CLIENT_MEDICATION, CLIENT_OTHER_THERAPIES, CLIENT_RESPONSE, CLIENT_RAPPORT_E"& _ 
                "NGAGEMENT, CLIENT_LIASION, CLIENT_ACTION_PLAN, THERAPIST_ID FROM CCAMH_CLIENT_AS"& _ 
                "SESSMENT_INFO WHERE (CLIENT_ASSESS_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_PRO_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_PRO_DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_MNG_PLAN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MNG_PLAN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_FINAL_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_FINAL_DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_ASSESS_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ASSESS_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_DATE_REG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_DATE_REG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_MEDICATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MEDICATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_OTHER_THERAPIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_OTHER_THERAPIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_RESPONSE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RESPONSE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_LIASION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_LIASION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_ACTION_PLAN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ACTION_PLAN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERAPIST_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "THERAPIST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [CCAMH_CLIENT_ASSESSMENT_INFO] SET [CLIENT_NO] = @CLIENT_NO, [CLIENT_PRO_D"& _ 
                "IAGNOSIS] = @CLIENT_PRO_DIAGNOSIS, [CLIENT_MNG_PLAN] = @CLIENT_MNG_PLAN, [CLIENT"& _ 
                "_FINAL_DIAGNOSIS] = @CLIENT_FINAL_DIAGNOSIS, [CLIENT_ASSESS_DATE] = @CLIENT_ASSE"& _ 
                "SS_DATE, [CLIENT_DATE_REG] = @CLIENT_DATE_REG, [CLIENT_MEDICATION] = @CLIENT_MED"& _ 
                "ICATION, [CLIENT_OTHER_THERAPIES] = @CLIENT_OTHER_THERAPIES, [CLIENT_RESPONSE] ="& _ 
                " @CLIENT_RESPONSE, [CLIENT_RAPPORT_ENGAGEMENT] = @CLIENT_RAPPORT_ENGAGEMENT, [CL"& _ 
                "IENT_LIASION] = @CLIENT_LIASION, [CLIENT_ACTION_PLAN] = @CLIENT_ACTION_PLAN, [TH"& _ 
                "ERAPIST_ID] = @THERAPIST_ID WHERE (([CLIENT_ASSESS_ID] = @Original_CLIENT_ASSESS"& _ 
                "_ID) AND ((@IsNull_CLIENT_NO = 1 AND [CLIENT_NO] IS NULL) OR ([CLIENT_NO] = @Ori"& _ 
                "ginal_CLIENT_NO)) AND ((@IsNull_CLIENT_PRO_DIAGNOSIS = 1 AND [CLIENT_PRO_DIAGNOS"& _ 
                "IS] IS NULL) OR ([CLIENT_PRO_DIAGNOSIS] = @Original_CLIENT_PRO_DIAGNOSIS)) AND ("& _ 
                "(@IsNull_CLIENT_MNG_PLAN = 1 AND [CLIENT_MNG_PLAN] IS NULL) OR ([CLIENT_MNG_PLAN"& _ 
                "] = @Original_CLIENT_MNG_PLAN)) AND ((@IsNull_CLIENT_FINAL_DIAGNOSIS = 1 AND [CL"& _ 
                "IENT_FINAL_DIAGNOSIS] IS NULL) OR ([CLIENT_FINAL_DIAGNOSIS] = @Original_CLIENT_F"& _ 
                "INAL_DIAGNOSIS)) AND ((@IsNull_CLIENT_ASSESS_DATE = 1 AND [CLIENT_ASSESS_DATE] I"& _ 
                "S NULL) OR ([CLIENT_ASSESS_DATE] = @Original_CLIENT_ASSESS_DATE)) AND ((@IsNull_"& _ 
                "CLIENT_DATE_REG = 1 AND [CLIENT_DATE_REG] IS NULL) OR ([CLIENT_DATE_REG] = @Orig"& _ 
                "inal_CLIENT_DATE_REG)) AND ((@IsNull_CLIENT_MEDICATION = 1 AND [CLIENT_MEDICATIO"& _ 
                "N] IS NULL) OR ([CLIENT_MEDICATION] = @Original_CLIENT_MEDICATION)) AND ((@IsNul"& _ 
                "l_CLIENT_OTHER_THERAPIES = 1 AND [CLIENT_OTHER_THERAPIES] IS NULL) OR ([CLIENT_O"& _ 
                "THER_THERAPIES] = @Original_CLIENT_OTHER_THERAPIES)) AND ((@IsNull_CLIENT_RESPON"& _ 
                "SE = 1 AND [CLIENT_RESPONSE] IS NULL) OR ([CLIENT_RESPONSE] = @Original_CLIENT_R"& _ 
                "ESPONSE)) AND ((@IsNull_CLIENT_RAPPORT_ENGAGEMENT = 1 AND [CLIENT_RAPPORT_ENGAGE"& _ 
                "MENT] IS NULL) OR ([CLIENT_RAPPORT_ENGAGEMENT] = @Original_CLIENT_RAPPORT_ENGAGE"& _ 
                "MENT)) AND ((@IsNull_CLIENT_LIASION = 1 AND [CLIENT_LIASION] IS NULL) OR ([CLIEN"& _ 
                "T_LIASION] = @Original_CLIENT_LIASION)) AND ((@IsNull_CLIENT_ACTION_PLAN = 1 AND"& _ 
                " [CLIENT_ACTION_PLAN] IS NULL) OR ([CLIENT_ACTION_PLAN] = @Original_CLIENT_ACTIO"& _ 
                "N_PLAN)) AND ((@IsNull_THERAPIST_ID = 1 AND [THERAPIST_ID] IS NULL) OR ([THERAPI"& _ 
                "ST_ID] = @Original_THERAPIST_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CLIENT_ASSESS_ID, CLIENT_NO, CLIENT_"& _ 
                "PRO_DIAGNOSIS, CLIENT_MNG_PLAN, CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSESS_DATE, CLIE"& _ 
                "NT_DATE_REG, CLIENT_MEDICATION, CLIENT_OTHER_THERAPIES, CLIENT_RESPONSE, CLIENT_"& _ 
                "RAPPORT_ENGAGEMENT, CLIENT_LIASION, CLIENT_ACTION_PLAN, THERAPIST_ID FROM CCAMH_"& _ 
                "CLIENT_ASSESSMENT_INFO WHERE (CLIENT_ASSESS_ID = @CLIENT_ASSESS_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_PRO_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_PRO_DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_MNG_PLAN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MNG_PLAN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_FINAL_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_FINAL_DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_ASSESS_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ASSESS_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_DATE_REG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_DATE_REG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_MEDICATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MEDICATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_OTHER_THERAPIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_OTHER_THERAPIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_RESPONSE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RESPONSE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_LIASION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_LIASION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_ACTION_PLAN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ACTION_PLAN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERAPIST_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "THERAPIST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_ASSESS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_PRO_DIAGNOSIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_PRO_DIAGNOSIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_PRO_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_PRO_DIAGNOSIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_MNG_PLAN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MNG_PLAN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_MNG_PLAN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MNG_PLAN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_FINAL_DIAGNOSIS", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_FINAL_DIAGNOSIS", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_FINAL_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_FINAL_DIAGNOSIS", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_ASSESS_DATE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ASSESS_DATE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_ASSESS_DATE", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ASSESS_DATE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_DATE_REG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_DATE_REG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_DATE_REG", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_DATE_REG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_MEDICATION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MEDICATION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_MEDICATION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MEDICATION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_OTHER_THERAPIES", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_OTHER_THERAPIES", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_OTHER_THERAPIES", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_OTHER_THERAPIES", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_RESPONSE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RESPONSE", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_RESPONSE", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RESPONSE", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_LIASION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_LIASION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_LIASION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_LIASION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_ACTION_PLAN", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ACTION_PLAN", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_ACTION_PLAN", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ACTION_PLAN", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_THERAPIST_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "THERAPIST_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_THERAPIST_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "THERAPIST_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_ASSESS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.KTGSYS.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CLIENT_ASSESS_ID, CLIENT_NO, CLIENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN,"& _ 
                " CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSESS_DATE, CLIENT_DATE_REG, CLIENT_MEDICATION,"& _ 
                " CLIENT_OTHER_THERAPIES, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CLIENT_RESPONSE, CLIENT_RAPP"& _ 
                "ORT_ENGAGEMENT, CLIENT_LIASION, CLIENT_ACTION_PLAN, THERAPIST_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          "& _ 
                "  CCAMH_CLIENT_ASSESSMENT_INFO"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CLIENT_ASSESS_ID, CLIENT_NO, CLIENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN,"& _ 
                " CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSESS_DATE, CLIENT_DATE_REG, CLIENT_MEDICATION,"& _ 
                " CLIENT_OTHER_THERAPIES, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CLIENT_RESPONSE, CLIENT_RAPP"& _ 
                "ORT_ENGAGEMENT, CLIENT_LIASION, CLIENT_ACTION_PLAN, THERAPIST_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM          "& _ 
                "  CCAMH_CLIENT_ASSESSMENT_INFO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CLIENT_NO = @CLIENT_NO)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "INSERT INTO CCAMH_CLIENT_ASSESSMENT_INFO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (CLIENT_NO, CL"& _ 
                "IENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN, CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSESS_DATE,"& _ 
                " CLIENT_DATE_REG, CLIENT_MEDICATION, CLIENT_OTHER_THERAPIES, CLIENT_RESPONSE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                         CLIENT_RAPPORT_ENGAGEMENT, CLIENT_LIASION, CLIENT_ACTIO"& _ 
                "N_PLAN, THERAPIST_ID)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (@CLIENT_NO,@CLIENT_PRO_DIAGNOSIS,@CLIENT_M"& _ 
                "NG_PLAN,@CLIENT_FINAL_DIAGNOSIS,@CLIENT_ASSESS_DATE,@CLIENT_DATE_REG,@CLIENT_MED"& _ 
                "ICATION,@CLIENT_OTHER_THERAPIES,@CLIENT_RESPONSE,@CLIENT_RAPPORT_ENGAGEMENT,@CLI"& _ 
                "ENT_LIASION,@CLIENT_ACTION_PLAN,@THERAPIST_ID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CLIENT_ASSESS_ID, CLIEN"& _ 
                "T_NO, CLIENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN, CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSE"& _ 
                "SS_DATE, CLIENT_DATE_REG, CLIENT_MEDICATION, CLIENT_OTHER_THERAPIES, CLIENT_RESP"& _ 
                "ONSE, CLIENT_RAPPORT_ENGAGEMENT, CLIENT_LIASION, CLIENT_ACTION_PLAN, THERAPIST_I"& _ 
                "D FROM CCAMH_CLIENT_ASSESSMENT_INFO WHERE (CLIENT_ASSESS_ID = SCOPE_IDENTITY())"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_PRO_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_PRO_DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_MNG_PLAN", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MNG_PLAN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_FINAL_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_FINAL_DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_ASSESS_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ASSESS_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_DATE_REG", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_DATE_REG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_MEDICATION", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MEDICATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_OTHER_THERAPIES", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_OTHER_THERAPIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_RESPONSE", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RESPONSE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_LIASION", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_LIASION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_ACTION_PLAN", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ACTION_PLAN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERAPIST_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "THERAPIST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "UPDATE       CCAMH_CLIENT_ASSESSMENT_INFO"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                CLIENT_PRO_DIAGNOSI"& _ 
                "S = @CLIENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN = @CLIENT_MNG_PLAN, CLIENT_FINAL_DIAG"& _ 
                "NOSIS = @CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSESS_DATE = @CLIENT_ASSESS_DATE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                      CLIENT_MEDICATION = @CLIENT_MEDICATION, CLIENT_OTHER_THERA"& _ 
                "PIES = @CLIENT_OTHER_THERAPIES, CLIENT_RESPONSE = @CLIENT_RESPONSE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "               CLIENT_RAPPORT_ENGAGEMENT = @CLIENT_RAPPORT_ENGAGEMENT, CLIENT_LI"& _ 
                "ASION = @CLIENT_LIASION, CLIENT_ACTION_PLAN = @CLIENT_ACTION_PLAN, THERAPIST_ID "& _ 
                "= @THERAPIST_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CLIENT_NO = @CLIENT_NO)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_PRO_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_PRO_DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_MNG_PLAN", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MNG_PLAN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_FINAL_DIAGNOSIS", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_FINAL_DIAGNOSIS", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_ASSESS_DATE", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ASSESS_DATE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_MEDICATION", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_MEDICATION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_OTHER_THERAPIES", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_OTHER_THERAPIES", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_RESPONSE", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RESPONSE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_RAPPORT_ENGAGEMENT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_LIASION", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_LIASION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_ACTION_PLAN", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_ACTION_PLAN", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@THERAPIST_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "THERAPIST_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_CLIENT_ASSESSMENT_INFODataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_CCAMH_ASSESSMENTS.CCAMH_CLIENT_ASSESSMENT_INFODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_CLIENT_ASSESSMENT_INFODataTable = New DS_CCAMH_ASSESSMENTS.CCAMH_CLIENT_ASSESSMENT_INFODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_CLIENT_ASSESSMENT_INFODataTable, ByVal CLIENT_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByClientNo(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal)) As DS_CCAMH_ASSESSMENTS.CCAMH_CLIENT_ASSESSMENT_INFODataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_CLIENT_ASSESSMENT_INFODataTable = New DS_CCAMH_ASSESSMENTS.CCAMH_CLIENT_ASSESSMENT_INFODataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_CLIENT_ASSESSMENT_INFODataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_CCAMH_ASSESSMENTS) As Integer
            Return Me.Adapter.Update(dataSet, "CCAMH_CLIENT_ASSESSMENT_INFO")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CLIENT_ASSESS_ID As Decimal, ByVal Original_CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal Original_CLIENT_PRO_DIAGNOSIS As String, ByVal Original_CLIENT_MNG_PLAN As String, ByVal Original_CLIENT_FINAL_DIAGNOSIS As String, ByVal Original_CLIENT_ASSESS_DATE As Global.System.Nullable(Of Date), ByVal Original_CLIENT_DATE_REG As Global.System.Nullable(Of Date), ByVal Original_CLIENT_MEDICATION As String, ByVal Original_CLIENT_OTHER_THERAPIES As String, ByVal Original_CLIENT_RESPONSE As String, ByVal Original_CLIENT_RAPPORT_ENGAGEMENT As String, ByVal Original_CLIENT_LIASION As String, ByVal Original_CLIENT_ACTION_PLAN As String, ByVal Original_THERAPIST_ID As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CLIENT_ASSESS_ID,Decimal)
            If (Original_CLIENT_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_CLIENT_PRO_DIAGNOSIS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CLIENT_PRO_DIAGNOSIS,String)
            End If
            If (Original_CLIENT_MNG_PLAN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_CLIENT_MNG_PLAN,String)
            End If
            If (Original_CLIENT_FINAL_DIAGNOSIS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_CLIENT_FINAL_DIAGNOSIS,String)
            End If
            If (Original_CLIENT_ASSESS_DATE.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_CLIENT_ASSESS_DATE.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_CLIENT_DATE_REG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_CLIENT_DATE_REG.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_CLIENT_MEDICATION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_CLIENT_MEDICATION,String)
            End If
            If (Original_CLIENT_OTHER_THERAPIES Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_CLIENT_OTHER_THERAPIES,String)
            End If
            If (Original_CLIENT_RESPONSE Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_CLIENT_RESPONSE,String)
            End If
            If (Original_CLIENT_RAPPORT_ENGAGEMENT Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_CLIENT_RAPPORT_ENGAGEMENT,String)
            End If
            If (Original_CLIENT_LIASION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_CLIENT_LIASION,String)
            End If
            If (Original_CLIENT_ACTION_PLAN Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_CLIENT_ACTION_PLAN,String)
            End If
            If (Original_THERAPIST_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_THERAPIST_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal CLIENT_PRO_DIAGNOSIS As String, ByVal CLIENT_MNG_PLAN As String, ByVal CLIENT_FINAL_DIAGNOSIS As String, ByVal CLIENT_ASSESS_DATE As Global.System.Nullable(Of Date), ByVal CLIENT_DATE_REG As Global.System.Nullable(Of Date), ByVal CLIENT_MEDICATION As String, ByVal CLIENT_OTHER_THERAPIES As String, ByVal CLIENT_RESPONSE As String, ByVal CLIENT_RAPPORT_ENGAGEMENT As String, ByVal CLIENT_LIASION As String, ByVal CLIENT_ACTION_PLAN As String, ByVal THERAPIST_ID As Global.System.Nullable(Of Decimal)) As Integer
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_PRO_DIAGNOSIS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CLIENT_PRO_DIAGNOSIS,String)
            End If
            If (CLIENT_MNG_PLAN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CLIENT_MNG_PLAN,String)
            End If
            If (CLIENT_FINAL_DIAGNOSIS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CLIENT_FINAL_DIAGNOSIS,String)
            End If
            If (CLIENT_ASSESS_DATE.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CLIENT_ASSESS_DATE.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_DATE_REG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CLIENT_DATE_REG.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_MEDICATION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(CLIENT_MEDICATION,String)
            End If
            If (CLIENT_OTHER_THERAPIES Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(CLIENT_OTHER_THERAPIES,String)
            End If
            If (CLIENT_RESPONSE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(CLIENT_RESPONSE,String)
            End If
            If (CLIENT_RAPPORT_ENGAGEMENT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(CLIENT_RAPPORT_ENGAGEMENT,String)
            End If
            If (CLIENT_LIASION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(CLIENT_LIASION,String)
            End If
            If (CLIENT_ACTION_PLAN Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(CLIENT_ACTION_PLAN,String)
            End If
            If (THERAPIST_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(THERAPIST_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CLIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal CLIENT_PRO_DIAGNOSIS As String,  _
                    ByVal CLIENT_MNG_PLAN As String,  _
                    ByVal CLIENT_FINAL_DIAGNOSIS As String,  _
                    ByVal CLIENT_ASSESS_DATE As Global.System.Nullable(Of Date),  _
                    ByVal CLIENT_DATE_REG As Global.System.Nullable(Of Date),  _
                    ByVal CLIENT_MEDICATION As String,  _
                    ByVal CLIENT_OTHER_THERAPIES As String,  _
                    ByVal CLIENT_RESPONSE As String,  _
                    ByVal CLIENT_RAPPORT_ENGAGEMENT As String,  _
                    ByVal CLIENT_LIASION As String,  _
                    ByVal CLIENT_ACTION_PLAN As String,  _
                    ByVal THERAPIST_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CLIENT_ASSESS_ID As Decimal,  _
                    ByVal Original_CLIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CLIENT_PRO_DIAGNOSIS As String,  _
                    ByVal Original_CLIENT_MNG_PLAN As String,  _
                    ByVal Original_CLIENT_FINAL_DIAGNOSIS As String,  _
                    ByVal Original_CLIENT_ASSESS_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_CLIENT_DATE_REG As Global.System.Nullable(Of Date),  _
                    ByVal Original_CLIENT_MEDICATION As String,  _
                    ByVal Original_CLIENT_OTHER_THERAPIES As String,  _
                    ByVal Original_CLIENT_RESPONSE As String,  _
                    ByVal Original_CLIENT_RAPPORT_ENGAGEMENT As String,  _
                    ByVal Original_CLIENT_LIASION As String,  _
                    ByVal Original_CLIENT_ACTION_PLAN As String,  _
                    ByVal Original_THERAPIST_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal CLIENT_ASSESS_ID As Decimal) As Integer
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_PRO_DIAGNOSIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CLIENT_PRO_DIAGNOSIS,String)
            End If
            If (CLIENT_MNG_PLAN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CLIENT_MNG_PLAN,String)
            End If
            If (CLIENT_FINAL_DIAGNOSIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CLIENT_FINAL_DIAGNOSIS,String)
            End If
            If (CLIENT_ASSESS_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CLIENT_ASSESS_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_DATE_REG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CLIENT_DATE_REG.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_MEDICATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(CLIENT_MEDICATION,String)
            End If
            If (CLIENT_OTHER_THERAPIES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CLIENT_OTHER_THERAPIES,String)
            End If
            If (CLIENT_RESPONSE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(CLIENT_RESPONSE,String)
            End If
            If (CLIENT_RAPPORT_ENGAGEMENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(CLIENT_RAPPORT_ENGAGEMENT,String)
            End If
            If (CLIENT_LIASION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(CLIENT_LIASION,String)
            End If
            If (CLIENT_ACTION_PLAN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(CLIENT_ACTION_PLAN,String)
            End If
            If (THERAPIST_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(THERAPIST_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_CLIENT_ASSESS_ID,Decimal)
            If (Original_CLIENT_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_CLIENT_PRO_DIAGNOSIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_CLIENT_PRO_DIAGNOSIS,String)
            End If
            If (Original_CLIENT_MNG_PLAN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_CLIENT_MNG_PLAN,String)
            End If
            If (Original_CLIENT_FINAL_DIAGNOSIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_CLIENT_FINAL_DIAGNOSIS,String)
            End If
            If (Original_CLIENT_ASSESS_DATE.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_CLIENT_ASSESS_DATE.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_CLIENT_DATE_REG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_CLIENT_DATE_REG.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_CLIENT_MEDICATION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_CLIENT_MEDICATION,String)
            End If
            If (Original_CLIENT_OTHER_THERAPIES Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_CLIENT_OTHER_THERAPIES,String)
            End If
            If (Original_CLIENT_RESPONSE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_CLIENT_RESPONSE,String)
            End If
            If (Original_CLIENT_RAPPORT_ENGAGEMENT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_CLIENT_RAPPORT_ENGAGEMENT,String)
            End If
            If (Original_CLIENT_LIASION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_CLIENT_LIASION,String)
            End If
            If (Original_CLIENT_ACTION_PLAN Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_CLIENT_ACTION_PLAN,String)
            End If
            If (Original_THERAPIST_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_THERAPIST_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(CLIENT_ASSESS_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CLIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal CLIENT_PRO_DIAGNOSIS As String,  _
                    ByVal CLIENT_MNG_PLAN As String,  _
                    ByVal CLIENT_FINAL_DIAGNOSIS As String,  _
                    ByVal CLIENT_ASSESS_DATE As Global.System.Nullable(Of Date),  _
                    ByVal CLIENT_DATE_REG As Global.System.Nullable(Of Date),  _
                    ByVal CLIENT_MEDICATION As String,  _
                    ByVal CLIENT_OTHER_THERAPIES As String,  _
                    ByVal CLIENT_RESPONSE As String,  _
                    ByVal CLIENT_RAPPORT_ENGAGEMENT As String,  _
                    ByVal CLIENT_LIASION As String,  _
                    ByVal CLIENT_ACTION_PLAN As String,  _
                    ByVal THERAPIST_ID As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CLIENT_ASSESS_ID As Decimal,  _
                    ByVal Original_CLIENT_NO As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_CLIENT_PRO_DIAGNOSIS As String,  _
                    ByVal Original_CLIENT_MNG_PLAN As String,  _
                    ByVal Original_CLIENT_FINAL_DIAGNOSIS As String,  _
                    ByVal Original_CLIENT_ASSESS_DATE As Global.System.Nullable(Of Date),  _
                    ByVal Original_CLIENT_DATE_REG As Global.System.Nullable(Of Date),  _
                    ByVal Original_CLIENT_MEDICATION As String,  _
                    ByVal Original_CLIENT_OTHER_THERAPIES As String,  _
                    ByVal Original_CLIENT_RESPONSE As String,  _
                    ByVal Original_CLIENT_RAPPORT_ENGAGEMENT As String,  _
                    ByVal Original_CLIENT_LIASION As String,  _
                    ByVal Original_CLIENT_ACTION_PLAN As String,  _
                    ByVal Original_THERAPIST_ID As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(CLIENT_NO, CLIENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN, CLIENT_FINAL_DIAGNOSIS, CLIENT_ASSESS_DATE, CLIENT_DATE_REG, CLIENT_MEDICATION, CLIENT_OTHER_THERAPIES, CLIENT_RESPONSE, CLIENT_RAPPORT_ENGAGEMENT, CLIENT_LIASION, CLIENT_ACTION_PLAN, THERAPIST_ID, Original_CLIENT_ASSESS_ID, Original_CLIENT_NO, Original_CLIENT_PRO_DIAGNOSIS, Original_CLIENT_MNG_PLAN, Original_CLIENT_FINAL_DIAGNOSIS, Original_CLIENT_ASSESS_DATE, Original_CLIENT_DATE_REG, Original_CLIENT_MEDICATION, Original_CLIENT_OTHER_THERAPIES, Original_CLIENT_RESPONSE, Original_CLIENT_RAPPORT_ENGAGEMENT, Original_CLIENT_LIASION, Original_CLIENT_ACTION_PLAN, Original_THERAPIST_ID, Original_CLIENT_ASSESS_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal CLIENT_PRO_DIAGNOSIS As String, ByVal CLIENT_MNG_PLAN As String, ByVal CLIENT_FINAL_DIAGNOSIS As String, ByVal CLIENT_ASSESS_DATE As Global.System.Nullable(Of Date), ByVal CLIENT_DATE_REG As Global.System.Nullable(Of Date), ByVal CLIENT_MEDICATION As String, ByVal CLIENT_OTHER_THERAPIES As String, ByVal CLIENT_RESPONSE As String, ByVal CLIENT_RAPPORT_ENGAGEMENT As String, ByVal CLIENT_LIASION As String, ByVal CLIENT_ACTION_PLAN As String, ByVal THERAPIST_ID As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(2)
            If (CLIENT_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_PRO_DIAGNOSIS Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(CLIENT_PRO_DIAGNOSIS,String)
            End If
            If (CLIENT_MNG_PLAN Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(CLIENT_MNG_PLAN,String)
            End If
            If (CLIENT_FINAL_DIAGNOSIS Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(CLIENT_FINAL_DIAGNOSIS,String)
            End If
            If (CLIENT_ASSESS_DATE.HasValue = true) Then
                command.Parameters(4).Value = CType(CLIENT_ASSESS_DATE.Value,Date)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_DATE_REG.HasValue = true) Then
                command.Parameters(5).Value = CType(CLIENT_DATE_REG.Value,Date)
            Else
                command.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_MEDICATION Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(CLIENT_MEDICATION,String)
            End If
            If (CLIENT_OTHER_THERAPIES Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(CLIENT_OTHER_THERAPIES,String)
            End If
            If (CLIENT_RESPONSE Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(CLIENT_RESPONSE,String)
            End If
            If (CLIENT_RAPPORT_ENGAGEMENT Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(CLIENT_RAPPORT_ENGAGEMENT,String)
            End If
            If (CLIENT_LIASION Is Nothing) Then
                command.Parameters(10).Value = Global.System.DBNull.Value
            Else
                command.Parameters(10).Value = CType(CLIENT_LIASION,String)
            End If
            If (CLIENT_ACTION_PLAN Is Nothing) Then
                command.Parameters(11).Value = Global.System.DBNull.Value
            Else
                command.Parameters(11).Value = CType(CLIENT_ACTION_PLAN,String)
            End If
            If (THERAPIST_ID.HasValue = true) Then
                command.Parameters(12).Value = CType(THERAPIST_ID.Value,Decimal)
            Else
                command.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateAssessInfoByClientNo(ByVal CLIENT_PRO_DIAGNOSIS As String, ByVal CLIENT_MNG_PLAN As String, ByVal CLIENT_FINAL_DIAGNOSIS As String, ByVal CLIENT_ASSESS_DATE As Global.System.Nullable(Of Date), ByVal CLIENT_MEDICATION As String, ByVal CLIENT_OTHER_THERAPIES As String, ByVal CLIENT_RESPONSE As String, ByVal CLIENT_RAPPORT_ENGAGEMENT As String, ByVal CLIENT_LIASION As String, ByVal CLIENT_ACTION_PLAN As String, ByVal THERAPIST_ID As Global.System.Nullable(Of Decimal), ByVal CLIENT_NO As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (CLIENT_PRO_DIAGNOSIS Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(CLIENT_PRO_DIAGNOSIS,String)
            End If
            If (CLIENT_MNG_PLAN Is Nothing) Then
                command.Parameters(1).Value = Global.System.DBNull.Value
            Else
                command.Parameters(1).Value = CType(CLIENT_MNG_PLAN,String)
            End If
            If (CLIENT_FINAL_DIAGNOSIS Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(CLIENT_FINAL_DIAGNOSIS,String)
            End If
            If (CLIENT_ASSESS_DATE.HasValue = true) Then
                command.Parameters(3).Value = CType(CLIENT_ASSESS_DATE.Value,Date)
            Else
                command.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_MEDICATION Is Nothing) Then
                command.Parameters(4).Value = Global.System.DBNull.Value
            Else
                command.Parameters(4).Value = CType(CLIENT_MEDICATION,String)
            End If
            If (CLIENT_OTHER_THERAPIES Is Nothing) Then
                command.Parameters(5).Value = Global.System.DBNull.Value
            Else
                command.Parameters(5).Value = CType(CLIENT_OTHER_THERAPIES,String)
            End If
            If (CLIENT_RESPONSE Is Nothing) Then
                command.Parameters(6).Value = Global.System.DBNull.Value
            Else
                command.Parameters(6).Value = CType(CLIENT_RESPONSE,String)
            End If
            If (CLIENT_RAPPORT_ENGAGEMENT Is Nothing) Then
                command.Parameters(7).Value = Global.System.DBNull.Value
            Else
                command.Parameters(7).Value = CType(CLIENT_RAPPORT_ENGAGEMENT,String)
            End If
            If (CLIENT_LIASION Is Nothing) Then
                command.Parameters(8).Value = Global.System.DBNull.Value
            Else
                command.Parameters(8).Value = CType(CLIENT_LIASION,String)
            End If
            If (CLIENT_ACTION_PLAN Is Nothing) Then
                command.Parameters(9).Value = Global.System.DBNull.Value
            Else
                command.Parameters(9).Value = CType(CLIENT_ACTION_PLAN,String)
            End If
            If (THERAPIST_ID.HasValue = true) Then
                command.Parameters(10).Value = CType(THERAPIST_ID.Value,Decimal)
            Else
                command.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_NO.HasValue = true) Then
                command.Parameters(11).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                command.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CCAMH_ASSESSMENT_DETAILTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CCAMH_ASSESSMENT_DETAIL"
            tableMapping.ColumnMappings.Add("REF_ID", "REF_ID")
            tableMapping.ColumnMappings.Add("CLIENT_NO", "CLIENT_NO")
            tableMapping.ColumnMappings.Add("ASSESS_ID", "ASSESS_ID")
            tableMapping.ColumnMappings.Add("ASSESS_NAME", "ASSESS_NAME")
            tableMapping.ColumnMappings.Add("ASSESS_DESCRIPTION", "ASSESS_DESCRIPTION")
            tableMapping.ColumnMappings.Add("ASSESS_COMPLETED", "ASSESS_COMPLETED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [CCAMH_ASSESSMENT_DETAIL] WHERE (([REF_ID] = @Original_REF_ID) AND (("& _ 
                "@IsNull_CLIENT_NO = 1 AND [CLIENT_NO] IS NULL) OR ([CLIENT_NO] = @Original_CLIEN"& _ 
                "T_NO)) AND ((@IsNull_ASSESS_ID = 1 AND [ASSESS_ID] IS NULL) OR ([ASSESS_ID] = @O"& _ 
                "riginal_ASSESS_ID)) AND ((@IsNull_ASSESS_NAME = 1 AND [ASSESS_NAME] IS NULL) OR "& _ 
                "([ASSESS_NAME] = @Original_ASSESS_NAME)) AND ((@IsNull_ASSESS_DESCRIPTION = 1 AN"& _ 
                "D [ASSESS_DESCRIPTION] IS NULL) OR ([ASSESS_DESCRIPTION] = @Original_ASSESS_DESC"& _ 
                "RIPTION)) AND ((@IsNull_ASSESS_COMPLETED = 1 AND [ASSESS_COMPLETED] IS NULL) OR "& _ 
                "([ASSESS_COMPLETED] = @Original_ASSESS_COMPLETED)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REF_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "REF_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_COMPLETED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_COMPLETED", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_COMPLETED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_COMPLETED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CCAMH_ASSESSMENT_DETAIL] ([CLIENT_NO], [ASSESS_ID], [ASSESS_NAME], ["& _ 
                "ASSESS_DESCRIPTION], [ASSESS_COMPLETED]) VALUES (@CLIENT_NO, @ASSESS_ID, @ASSESS"& _ 
                "_NAME, @ASSESS_DESCRIPTION, @ASSESS_COMPLETED);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT REF_ID, CLIENT_NO, ASSES"& _ 
                "S_ID, ASSESS_NAME, ASSESS_DESCRIPTION, ASSESS_COMPLETED FROM CCAMH_ASSESSMENT_DE"& _ 
                "TAIL WHERE (REF_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_COMPLETED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [CCAMH_ASSESSMENT_DETAIL] SET [CLIENT_NO] = @CLIENT_NO, [ASSESS_ID] = @ASS"& _ 
                "ESS_ID, [ASSESS_NAME] = @ASSESS_NAME, [ASSESS_DESCRIPTION] = @ASSESS_DESCRIPTION"& _ 
                ", [ASSESS_COMPLETED] = @ASSESS_COMPLETED WHERE (([REF_ID] = @Original_REF_ID) AN"& _ 
                "D ((@IsNull_CLIENT_NO = 1 AND [CLIENT_NO] IS NULL) OR ([CLIENT_NO] = @Original_C"& _ 
                "LIENT_NO)) AND ((@IsNull_ASSESS_ID = 1 AND [ASSESS_ID] IS NULL) OR ([ASSESS_ID] "& _ 
                "= @Original_ASSESS_ID)) AND ((@IsNull_ASSESS_NAME = 1 AND [ASSESS_NAME] IS NULL)"& _ 
                " OR ([ASSESS_NAME] = @Original_ASSESS_NAME)) AND ((@IsNull_ASSESS_DESCRIPTION = "& _ 
                "1 AND [ASSESS_DESCRIPTION] IS NULL) OR ([ASSESS_DESCRIPTION] = @Original_ASSESS_"& _ 
                "DESCRIPTION)) AND ((@IsNull_ASSESS_COMPLETED = 1 AND [ASSESS_COMPLETED] IS NULL)"& _ 
                " OR ([ASSESS_COMPLETED] = @Original_ASSESS_COMPLETED)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT REF_ID, CLIENT_"& _ 
                "NO, ASSESS_ID, ASSESS_NAME, ASSESS_DESCRIPTION, ASSESS_COMPLETED FROM CCAMH_ASSE"& _ 
                "SSMENT_DETAIL WHERE (REF_ID = @REF_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_COMPLETED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_REF_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "REF_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_CLIENT_NO", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_NAME", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ASSESS_COMPLETED", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_COMPLETED", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ASSESS_COMPLETED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_COMPLETED", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@REF_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "REF_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.KTGSYS.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(4) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        REF_ID, CLIENT_NO, ASSESS_ID, ASSESS_NAME, ASSESS_DESCRIPTION, ASSE"& _ 
                "SS_COMPLETED"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CCAMH_ASSESSMENT_DETAIL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "DELETE FROM CCAMH_ASSESSMENT_DETAIL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CLIENT_NO = @CLIENT_NO)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT ASSESS_COMPLETED, ASSESS_DESCRIPTION, ASSESS_ID, ASSESS_NAME, CLIENT_NO, R"& _ 
                "EF_ID FROM CCAMH_ASSESSMENT_DETAIL WHERE (CLIENT_NO = @CLIENT_NO)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "INSERT INTO CCAMH_ASSESSMENT_DETAIL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (CLIENT_NO, ASSESS_"& _ 
                "ID, ASSESS_NAME, ASSESS_DESCRIPTION)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (@CLIENT_NO,@ASSESS_ID,@ASSE"& _ 
                "SS_NAME,@ASSESS_DESCRIPTION); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT REF_ID, CLIENT_NO, ASSESS_ID, ASSESS_NAME"& _ 
                ", ASSESS_DESCRIPTION FROM CCAMH_ASSESSMENT_DETAIL WHERE (REF_ID = SCOPE_IDENTITY"& _ 
                "())"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "INSERT INTO CCAMH_ASSESSMENT_DETAIL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         (CLIENT_NO, ASSESS_"& _ 
                "ID, ASSESS_NAME, ASSESS_DESCRIPTION, ASSESS_COMPLETED)"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"VALUES        (@CLIENT_N"& _ 
                "O,@ASSESS_ID,@ASSESS_NAME,@ASSESS_DESCRIPTION,@ASSESS_COMPLETED); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT REF_I"& _ 
                "D, CLIENT_NO, ASSESS_ID, ASSESS_NAME, ASSESS_DESCRIPTION, ASSESS_COMPLETED FROM "& _ 
                "CCAMH_ASSESSMENT_DETAIL WHERE (REF_ID = SCOPE_IDENTITY())"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_ID", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "ASSESS_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_NAME", Global.System.Data.SqlDbType.NVarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_NAME", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_DESCRIPTION", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_DESCRIPTION", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ASSESS_COMPLETED", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "ASSESS_COMPLETED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENT_DETAILDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENT_DETAILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENT_DETAILDataTable = New DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENT_DETAILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENT_DETAILDataTable, ByVal CLIENT_NO As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByClientNo(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal)) As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENT_DETAILDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENT_DETAILDataTable = New DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENT_DETAILDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_ASSESSMENT_DETAILDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_CCAMH_ASSESSMENTS) As Integer
            Return Me.Adapter.Update(dataSet, "CCAMH_ASSESSMENT_DETAIL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_REF_ID As Decimal, ByVal Original_CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal Original_ASSESS_ID As Global.System.Nullable(Of Decimal), ByVal Original_ASSESS_NAME As String, ByVal Original_ASSESS_DESCRIPTION As String, ByVal Original_ASSESS_COMPLETED As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_REF_ID,Decimal)
            If (Original_CLIENT_NO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ASSESS_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_ASSESS_ID.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_ASSESS_NAME Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ASSESS_NAME,String)
            End If
            If (Original_ASSESS_DESCRIPTION Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_ASSESS_DESCRIPTION,String)
            End If
            If (Original_ASSESS_COMPLETED.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ASSESS_COMPLETED.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal ASSESS_ID As Global.System.Nullable(Of Decimal), ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String, ByVal ASSESS_COMPLETED As Global.System.Nullable(Of Boolean)) As Integer
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ASSESS_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ASSESS_ID.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ASSESS_NAME Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ASSESS_NAME,String)
            End If
            If (ASSESS_DESCRIPTION Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ASSESS_DESCRIPTION,String)
            End If
            If (ASSESS_COMPLETED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ASSESS_COMPLETED.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal ASSESS_ID As Global.System.Nullable(Of Decimal), ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String, ByVal ASSESS_COMPLETED As Global.System.Nullable(Of Boolean), ByVal Original_REF_ID As Decimal, ByVal Original_CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal Original_ASSESS_ID As Global.System.Nullable(Of Decimal), ByVal Original_ASSESS_NAME As String, ByVal Original_ASSESS_DESCRIPTION As String, ByVal Original_ASSESS_COMPLETED As Global.System.Nullable(Of Boolean), ByVal REF_ID As Decimal) As Integer
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ASSESS_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ASSESS_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ASSESS_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ASSESS_NAME,String)
            End If
            If (ASSESS_DESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ASSESS_DESCRIPTION,String)
            End If
            If (ASSESS_COMPLETED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ASSESS_COMPLETED.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_REF_ID,Decimal)
            If (Original_CLIENT_NO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_ASSESS_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_ASSESS_ID.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_ASSESS_NAME Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ASSESS_NAME,String)
            End If
            If (Original_ASSESS_DESCRIPTION Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_ASSESS_DESCRIPTION,String)
            End If
            If (Original_ASSESS_COMPLETED.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_ASSESS_COMPLETED.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(REF_ID,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal ASSESS_ID As Global.System.Nullable(Of Decimal), ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String, ByVal ASSESS_COMPLETED As Global.System.Nullable(Of Boolean), ByVal Original_REF_ID As Decimal, ByVal Original_CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal Original_ASSESS_ID As Global.System.Nullable(Of Decimal), ByVal Original_ASSESS_NAME As String, ByVal Original_ASSESS_DESCRIPTION As String, ByVal Original_ASSESS_COMPLETED As Global.System.Nullable(Of Boolean)) As Integer
            Return Me.Update(CLIENT_NO, ASSESS_ID, ASSESS_NAME, ASSESS_DESCRIPTION, ASSESS_COMPLETED, Original_REF_ID, Original_CLIENT_NO, Original_ASSESS_ID, Original_ASSESS_NAME, Original_ASSESS_DESCRIPTION, Original_ASSESS_COMPLETED, Original_REF_ID)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, false)>  _
        Public Overloads Overridable Function DeleteByClientNo(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (CLIENT_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function InsertQuery(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal ASSESS_ID As Global.System.Nullable(Of Decimal), ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(3)
            If (CLIENT_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ASSESS_ID.HasValue = true) Then
                command.Parameters(1).Value = CType(ASSESS_ID.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ASSESS_NAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(ASSESS_NAME,String)
            End If
            If (ASSESS_DESCRIPTION Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(ASSESS_DESCRIPTION,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, false)>  _
        Public Overloads Overridable Function UpdateByTherapist(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal ASSESS_ID As Global.System.Nullable(Of Decimal), ByVal ASSESS_NAME As String, ByVal ASSESS_DESCRIPTION As String, ByVal ASSESS_COMPLETED As Global.System.Nullable(Of Boolean)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(4)
            If (CLIENT_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ASSESS_ID.HasValue = true) Then
                command.Parameters(1).Value = CType(ASSESS_ID.Value,Decimal)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ASSESS_NAME Is Nothing) Then
                command.Parameters(2).Value = Global.System.DBNull.Value
            Else
                command.Parameters(2).Value = CType(ASSESS_NAME,String)
            End If
            If (ASSESS_DESCRIPTION Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(ASSESS_DESCRIPTION,String)
            End If
            If (ASSESS_COMPLETED.HasValue = true) Then
                command.Parameters(4).Value = CType(ASSESS_COMPLETED.Value,Boolean)
            Else
                command.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CLIENT_CA_SOCIALTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CLIENT_CA_SOCIAL"
            tableMapping.ColumnMappings.Add("CLIENT_NO", "CLIENT_NO")
            tableMapping.ColumnMappings.Add("CLIENT_IS_ASSESS_CHECKED", "CLIENT_IS_ASSESS_CHECKED")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [CLIENT_CA_SOCIAL] ([CLIENT_NO], [CLIENT_IS_ASSESS_CHECKED]) VALUES ("& _ 
                "@CLIENT_NO, @CLIENT_IS_ASSESS_CHECKED)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_IS_ASSESS_CHECKED", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CLIENT_IS_ASSESS_CHECKED", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.KTGSYS.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CLIENT_NO, CLIENT_IS_ASSESS_CHECKED"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CLIENT_CA_SOCI"& _ 
                "AL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "UPDATE       CLIENT_CA_SOCIAL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET                CLIENT_IS_ASSESS_CHECKED = 1"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"W"& _ 
                "HERE        (CLIENT_NO = @CLIENT_NO)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CLIENT_CA_SOCIALDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_CCAMH_ASSESSMENTS.CLIENT_CA_SOCIALDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CLIENT_CA_SOCIALDataTable = New DS_CCAMH_ASSESSMENTS.CLIENT_CA_SOCIALDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CLIENT_CA_SOCIALDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DS_CCAMH_ASSESSMENTS) As Integer
            Return Me.Adapter.Update(dataSet, "CLIENT_CA_SOCIAL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal), ByVal CLIENT_IS_ASSESS_CHECKED As Global.System.Nullable(Of Boolean)) As Integer
            If (CLIENT_NO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (CLIENT_IS_ASSESS_CHECKED.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(CLIENT_IS_ASSESS_CHECKED.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateAssessedClient(ByVal CLIENT_NO As Global.System.Nullable(Of Decimal)) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(1)
            If (CLIENT_NO.HasValue = true) Then
                command.Parameters(0).Value = CType(CLIENT_NO.Value,Decimal)
            Else
                command.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS"
            tableMapping.ColumnMappings.Add("CLIENT_NO", "CLIENT_NO")
            tableMapping.ColumnMappings.Add("CLIENT_NAME_KHM", "CLIENT_NAME_KHM")
            tableMapping.ColumnMappings.Add("CLIENT_NAME", "CLIENT_NAME")
            tableMapping.ColumnMappings.Add("CLIENT_AGE", "CLIENT_AGE")
            tableMapping.ColumnMappings.Add("CLIENT_SEX", "CLIENT_SEX")
            tableMapping.ColumnMappings.Add("CLIENT_DOB", "CLIENT_DOB")
            tableMapping.ColumnMappings.Add("CLIENT_DATE_REG", "CLIENT_DATE_REG")
            tableMapping.ColumnMappings.Add("CLIENT_PRO_DIAGNOSIS", "CLIENT_PRO_DIAGNOSIS")
            tableMapping.ColumnMappings.Add("CLIENT_MNG_PLAN", "CLIENT_MNG_PLAN")
            tableMapping.ColumnMappings.Add("CLIENT_FINAL_DIAGNOSIS", "CLIENT_FINAL_DIAGNOSIS")
            tableMapping.ColumnMappings.Add("CLIENT_ASSESS_DATE", "CLIENT_ASSESS_DATE")
            tableMapping.ColumnMappings.Add("Expr1", "Expr1")
            tableMapping.ColumnMappings.Add("CLIENT_MEDICATION", "CLIENT_MEDICATION")
            tableMapping.ColumnMappings.Add("CLIENT_OTHER_THERAPIES", "CLIENT_OTHER_THERAPIES")
            tableMapping.ColumnMappings.Add("CLIENT_RESPONSE", "CLIENT_RESPONSE")
            tableMapping.ColumnMappings.Add("CLIENT_RAPPORT_ENGAGEMENT", "CLIENT_RAPPORT_ENGAGEMENT")
            tableMapping.ColumnMappings.Add("CLIENT_LIASION", "CLIENT_LIASION")
            tableMapping.ColumnMappings.Add("CLIENT_ACTION_PLAN", "CLIENT_ACTION_PLAN")
            tableMapping.ColumnMappings.Add("THERAPIST_ID", "THERAPIST_ID")
            tableMapping.ColumnMappings.Add("THERAPIST_NAME", "THERAPIST_NAME")
            tableMapping.ColumnMappings.Add("THERAPIST_NOTES", "THERAPIST_NOTES")
            tableMapping.ColumnMappings.Add("CLIENT_ID", "CLIENT_ID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.KTGSYS.My.MySettings.Default.TakeoDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        CLIENT_NO, CLIENT_NAME_KHM, CLIENT_NAME, CLIENT_AGE, CLIENT_SEX, CL"& _ 
                "IENT_DOB, CLIENT_DATE_REG, CLIENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN, CLIENT_FINAL_D"& _ 
                "IAGNOSIS, CLIENT_ASSESS_DATE, Expr1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CLIENT_MEDICATIO"& _ 
                "N, CLIENT_OTHER_THERAPIES, CLIENT_RESPONSE, CLIENT_RAPPORT_ENGAGEMENT, CLIENT_LI"& _ 
                "ASION, CLIENT_ACTION_PLAN, THERAPIST_ID, THERAPIST_NAME, THERAPIST_NOTES, CLIENT"& _ 
                "_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        CLIENT_NO, CLIENT_NAME_KHM, CLIENT_NAME, CLIENT_AGE, CLIENT_SEX, CL"& _ 
                "IENT_DOB, CLIENT_DATE_REG, CLIENT_PRO_DIAGNOSIS, CLIENT_MNG_PLAN, CLIENT_FINAL_D"& _ 
                "IAGNOSIS, CLIENT_ASSESS_DATE, Expr1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         CLIENT_MEDICATIO"& _ 
                "N, CLIENT_OTHER_THERAPIES, CLIENT_RESPONSE, CLIENT_RAPPORT_ENGAGEMENT, CLIENT_LI"& _ 
                "ASION, CLIENT_ACTION_PLAN, THERAPIST_ID, THERAPIST_NAME, THERAPIST_NOTES, CLIENT"& _ 
                "_ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            CCAMH_VIEW_ACTIVE_ADVISED_CLIENTS"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (CLIENT_NO "& _ 
                "= @CLIENT_NO)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CLIENT_NO", Global.System.Data.SqlDbType.[Decimal], 9, Global.System.Data.ParameterDirection.Input, 18, 0, "CLIENT_NO", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable = New DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBy(ByVal dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable, ByVal CLIENT_NO As Decimal) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CLIENT_NO,Decimal)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByClientNo(ByVal CLIENT_NO As Decimal) As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(CLIENT_NO,Decimal)
            Dim dataTable As DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable = New DS_CCAMH_ASSESSMENTS.CCAMH_VIEW_ACTIVE_ADVISED_CLIENTSDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _cCAMH_ASSESSMENTSTableAdapter As CCAMH_ASSESSMENTSTableAdapter
        
        Private _cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter As CCAMH_CLIENT_ASSESSMENT_INFOTableAdapter
        
        Private _cCAMH_ASSESSMENT_DETAILTableAdapter As CCAMH_ASSESSMENT_DETAILTableAdapter
        
        Private _cLIENT_CA_SOCIALTableAdapter As CLIENT_CA_SOCIALTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CCAMH_ASSESSMENTSTableAdapter() As CCAMH_ASSESSMENTSTableAdapter
            Get
                Return Me._cCAMH_ASSESSMENTSTableAdapter
            End Get
            Set
                Me._cCAMH_ASSESSMENTSTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CCAMH_CLIENT_ASSESSMENT_INFOTableAdapter() As CCAMH_CLIENT_ASSESSMENT_INFOTableAdapter
            Get
                Return Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter
            End Get
            Set
                Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CCAMH_ASSESSMENT_DETAILTableAdapter() As CCAMH_ASSESSMENT_DETAILTableAdapter
            Get
                Return Me._cCAMH_ASSESSMENT_DETAILTableAdapter
            End Get
            Set
                Me._cCAMH_ASSESSMENT_DETAILTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CLIENT_CA_SOCIALTableAdapter() As CLIENT_CA_SOCIALTableAdapter
            Get
                Return Me._cLIENT_CA_SOCIALTableAdapter
            End Get
            Set
                Me._cLIENT_CA_SOCIALTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._cCAMH_ASSESSMENTSTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cCAMH_ASSESSMENTSTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cCAMH_ASSESSMENTSTableAdapter.Connection
                End If
                If ((Not (Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Connection
                End If
                If ((Not (Me._cCAMH_ASSESSMENT_DETAILTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Connection
                End If
                If ((Not (Me._cLIENT_CA_SOCIALTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._cLIENT_CA_SOCIALTableAdapter.Connection) Is Nothing)) Then
                    Return Me._cLIENT_CA_SOCIALTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._cCAMH_ASSESSMENTSTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cCAMH_ASSESSMENT_DETAILTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._cLIENT_CA_SOCIALTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DS_CCAMH_ASSESSMENTS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cCAMH_ASSESSMENT_DETAILTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CCAMH_ASSESSMENT_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cLIENT_CA_SOCIALTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CLIENT_CA_SOCIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cLIENT_CA_SOCIALTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cCAMH_ASSESSMENTSTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CCAMH_ASSESSMENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cCAMH_ASSESSMENTSTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CCAMH_CLIENT_ASSESSMENT_INFO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DS_CCAMH_ASSESSMENTS, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cCAMH_ASSESSMENT_DETAILTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CCAMH_ASSESSMENT_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cLIENT_CA_SOCIALTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CLIENT_CA_SOCIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cLIENT_CA_SOCIALTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cCAMH_ASSESSMENTSTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CCAMH_ASSESSMENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cCAMH_ASSESSMENTSTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CCAMH_CLIENT_ASSESSMENT_INFO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DS_CCAMH_ASSESSMENTS, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CCAMH_CLIENT_ASSESSMENT_INFO.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cCAMH_ASSESSMENTSTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CCAMH_ASSESSMENTS.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cCAMH_ASSESSMENTSTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cLIENT_CA_SOCIALTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CLIENT_CA_SOCIAL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cLIENT_CA_SOCIALTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._cCAMH_ASSESSMENT_DETAILTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CCAMH_ASSESSMENT_DETAIL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DS_CCAMH_ASSESSMENTS) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._cCAMH_ASSESSMENTSTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cCAMH_ASSESSMENTSTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._cCAMH_ASSESSMENT_DETAILTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._cLIENT_CA_SOCIALTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._cLIENT_CA_SOCIALTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._cCAMH_ASSESSMENTSTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cCAMH_ASSESSMENTSTableAdapter, Me._cCAMH_ASSESSMENTSTableAdapter.Connection)
                    Me._cCAMH_ASSESSMENTSTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cCAMH_ASSESSMENTSTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cCAMH_ASSESSMENTSTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cCAMH_ASSESSMENTSTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cCAMH_ASSESSMENTSTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter, Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Connection)
                    Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cCAMH_ASSESSMENT_DETAILTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cCAMH_ASSESSMENT_DETAILTableAdapter, Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Connection)
                    Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._cLIENT_CA_SOCIALTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._cLIENT_CA_SOCIALTableAdapter, Me._cLIENT_CA_SOCIALTableAdapter.Connection)
                    Me._cLIENT_CA_SOCIALTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._cLIENT_CA_SOCIALTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._cLIENT_CA_SOCIALTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._cLIENT_CA_SOCIALTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._cLIENT_CA_SOCIALTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._cCAMH_ASSESSMENTSTableAdapter) Is Nothing) Then
                    Me._cCAMH_ASSESSMENTSTableAdapter.Connection = CType(revertConnections(Me._cCAMH_ASSESSMENTSTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cCAMH_ASSESSMENTSTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter) Is Nothing) Then
                    Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Connection = CType(revertConnections(Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cCAMH_CLIENT_ASSESSMENT_INFOTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cCAMH_ASSESSMENT_DETAILTableAdapter) Is Nothing) Then
                    Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Connection = CType(revertConnections(Me._cCAMH_ASSESSMENT_DETAILTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cCAMH_ASSESSMENT_DETAILTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._cLIENT_CA_SOCIALTableAdapter) Is Nothing) Then
                    Me._cLIENT_CA_SOCIALTableAdapter.Connection = CType(revertConnections(Me._cLIENT_CA_SOCIALTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._cLIENT_CA_SOCIALTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
